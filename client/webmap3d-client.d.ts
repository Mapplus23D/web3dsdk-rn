// Generated by dts-bundle-generator v9.5.1

/** 地图渲染信息 */
export interface IMap3D extends Partial<MapSetting> {
	/** 版本号 */
	version: number;
	/** 地图id */
	id: number;
	/** iserver 发布的三维场景 */
	scene?: {
		/** iserver 发布的场景 url */
		url: string;
		/** 默认打开的场景名，若为undefined则打开第一个 */
		sceneName?: string;
		modifiedS3MLayers?: S3MLayer[];
	};
	/** 相机参数，指定相机位置和方向 */
	camera: Camera;
	/** 天地图3维注记 */
	annotation3D?: {
		/** 天地图服务 token */
		token: string;
		visible: boolean;
		displayDistance?: number;
	};
	/** 经纬网参数 */
	graticuleParam?: GraticuleParam;
	/** 是否显示经纬网 */
	graticuleVisible?: boolean;
	/** 扫描线效果 */
	scanEffect?: ScanEffect;
	/** 影像图层 */
	imageLayers?: ImageLayer[];
	/** 地形图层 */
	terrainLayer?: TerrainLayer;
	/** 粒子特效图层 */
	particleLayers?: ParticleLayer[];
	/** primitive图层 */
	primitiveLayers?: PrimitiveLayer[];
	/** 矢量图层 */
	entitiesLayers?: EntitiesLayer[];
	/** 切片图层 */
	s3mTilesLayers?: S3MTilesLayer[];
	/** 屏幕图层 @deprecated  */
	screenLayer?: ScreenLayer;
	/** 动画*/
	animation?: AnimationParam;
	/** 天气特效 */
	weather?: Rain | Snow | null;
	/** 幻灯片 */
	slideShow?: Slide[];
}
export interface GraticuleParam {
	/**  The line color. Defaults to Color.WHITE.withAlpha(.5) */
	color?: string;
	/** The meridians line color, show only meridians option is true. Defaults to Color.YELLOW */
	meridiansColor?: string;
	/**  The render debounce value, defaults to 500ms */
	debounce?: number;
	/**  Lines in screen, defaults to 15 */
	gridCount?: number;
	/**  If show the colored meridians, defaults to true */
	meridians?: boolean;
	/**  font css, defaults to `bold 1rem Arial` */
	labelFont?: string;
	/**  defaults to Color.WHITE */
	labelColor?: string;
	/** defaults to Color.BLACK */
	labelOutlineColor?: string;
	/** defualts to 4 */
	labelOutlineWidth?: number;
}
export interface ScreenLayer {
	subtitle?: {
		subtitles?: (AudioSubtitle & {
			style?: TextStyle;
		})[];
		textStyle?: TextStyle;
		visible: boolean;
	};
	image?: {
		images?: IScreenImage[];
		visible: boolean;
	};
	text?: {
		texts?: IScreenText[];
		visible: boolean;
	};
	video?: {
		videos?: IScreenVideo[];
		visible: boolean;
	};
	visible: boolean;
}
/** @deprecated */
export interface TextStyle {
	color?: string;
	fontSize?: number;
	fontFamily?: string;
	textShadowColor?: string;
	textShadowOffset?: {
		width: number;
		height: number;
	};
	textShadowRadius?: number;
}
/** @deprecated */
export type OpaqueColorValue = symbol & {
	__TYPE__: "Color";
};
/** @deprecated */
export type ColorValue = string | OpaqueColorValue;
/** @deprecated */
export interface ViewStyle {
	backfaceVisibility?: "visible" | "hidden" | undefined;
	backgroundColor?: ColorValue | undefined;
	borderBottomColor?: ColorValue | undefined;
	borderBottomEndRadius?: number | undefined;
	borderBottomLeftRadius?: number | undefined;
	borderBottomRightRadius?: number | undefined;
	borderBottomStartRadius?: number | undefined;
	borderBottomWidth?: number | undefined;
	borderColor?: ColorValue | undefined;
	borderEndColor?: ColorValue | undefined;
	borderLeftColor?: ColorValue | undefined;
	borderLeftWidth?: number | undefined;
	borderRadius?: number | undefined;
	borderRightColor?: ColorValue | undefined;
	borderRightWidth?: number | undefined;
	borderStartColor?: ColorValue | undefined;
	borderStyle?: "solid" | "dotted" | "dashed" | undefined;
	borderTopColor?: ColorValue | undefined;
	borderTopEndRadius?: number | undefined;
	borderTopLeftRadius?: number | undefined;
	borderTopRightRadius?: number | undefined;
	borderTopStartRadius?: number | undefined;
	borderTopWidth?: number | undefined;
	borderWidth?: number | undefined;
	opacity?: number | undefined;
}
/** @deprecated */
export type ScreenAnimation = IScreenImage | IScreenText | IScreenVideo;
/** @deprecated */
export interface IScreenImage extends IScreenItem {
	url: string;
	isFull?: boolean;
}
/** @deprecated */
export interface IScreenText extends IScreenItem {
	text: string;
	style?: ViewStyle;
	textStyle?: TextStyle;
}
/** @deprecated */
export interface IScreenVideo {
	/** 屏幕动画名字 */
	name: string;
	videoUrl: string;
	/** 开始时间。单位 秒 */
	startTime: number;
	/** 视频原始宽度 */
	width: number;
	/** 视频原始高度 */
	height: number;
	/** 视频时长 */
	endTime: number;
	isFull?: boolean;
	position: ScreenPosition;
	entering: ScreenEffect;
	exiting: ScreenEffect;
}
/** @deprecated */
export interface IScreenItem {
	/** 屏幕动画名字 */
	name: string;
	/** 开始时间。单位 秒 */
	startTime: number;
	endTime: number;
	position: ScreenPosition;
	entering: ScreenEffect;
	exiting: ScreenEffect;
}
export interface ScreenEffect {
	/** 效果 */
	effect: EffectType;
	/** 时长，单位 毫秒 */
	duration: number;
}
export type EffectType = "None" | "FadeRight" | "Split" | "Box" | "Wheel" | "Diamond" | "Blinds";
export declare enum ScreenPosition {
	TOP_LEFT = 0,
	TOP_CENTER = 1,
	TOP_RIGHT = 2,
	CENTER_LEFT = 3,
	CENTER = 4,
	CENTER_RIGHT = 5,
	BOTTOM_LEFTL = 6,
	BOTTOM_CENTER = 7,
	BOTTOM_RIGHT = 8
}
export interface MapSetting {
	/** 画质 */
	quality: number;
	/** 天空盒 */
	skybox: Skybox;
	/** 大气 */
	atmosphere: Atmosphere;
	/** 云层 */
	clouds: Clouds;
	/** 太阳 */
	sun: Sun;
	/** 颜色校正 */
	colorCorrection: ColorCorrectionType;
	/** 地球光照阴影 */
	lighting?: GlobeLighting;
	/** 对象阴影 */
	shadow?: Shadow;
	/** 雾化 */
	fog?: Fog;
	/** 深度检测 */
	depthTestAgainstTerrain?: boolean;
	/** hdr(高动态光照渲染，一种提高影像亮度和对比度的处理技术) */
	hdrEnable?: boolean;
	/** 泛光设置 */
	bloomEffect?: BloomEffect;
	/** 地形夸张系数。默认为 1 */
	terrainExaggeration?: number;
}
export interface GlobeLighting {
	enable: boolean;
}
export interface Shadow {
	enable: boolean;
}
export interface Fog {
	enable: boolean;
}
export interface BloomEffect {
	enable?: boolean;
	/** 泛光强度值 */
	bloomIntensity?: number;
	/** 泛光亮度阈值 */
	threshold?: number;
}
/** 天空盒 */
export interface Skybox {
	/** 是否可见 */
	visible: boolean;
	/** 天空盒的图片资源 */
	sources: SkyboxResource;
}
export type ImageProvider = SuperMapImageProvider | BingMapsImageProvider | TiandituImageProvider | UrlTemplateImageProvider | GridImageProvider | ChangGuangProvider | LocalProvider;
export type TerrainProvider = SuperMapTerrainProvider | TiandituTerrainProvider | SCTTerrainProvider | LocalProvider;
/** 影像图层 */
export interface ImageLayer {
	/** 图层名 */
	name: string;
	/** 影像服务参数 */
	provider: ImageProvider;
	/** 图层是否可见 */
	visible: boolean;
	/** 透明度 0～1 默认1 */
	alpha?: number;
}
/** 地形图层 */
export interface TerrainLayer {
	/** 图层名 */
	name: string;
	/** 地形服务参数 */
	provider: TerrainProvider;
	/** 图层是否可见 */
	visible: boolean;
}
export interface EntitiesLayer {
	/** 图层名 */
	name: string;
	/** 图层是否可见,默认可见*/
	visible: boolean;
	/** 是否多媒体图层 */
	isMediaLayer?: boolean;
	/** 图层数据 */
	datasource?: EntitiesDatasource | EntityCollection;
}
export interface EntityCollection {
	entities: Entity[];
}
export interface EntitiesDatasource {
	/** 数据类型，默认json */
	contentType: "json" | "kml";
	/** 图层数据 */
	content: string;
}
declare enum S3MLayerType {
	/** S3M */
	S3M = 0,
	/** S3MGroup */
	S3MGroup = 1
}
export interface S3MTilesLayerBase {
	/** 图层名 */
	name: string;
	/** 图层是否可见,默认可见*/
	visible: boolean;
}
declare enum WaterbodySize {
	/** 适用于较小水域范围为50*50 单位米，枚举值0 */
	SMALL = 0,
	/** 适用于中等水域范围为100*100 单位米，枚举值1 */
	MEDIUM = 1,
	/** 适用于较广水域范围为1000*1000 单位米，枚举值2 */
	LARGE = 2
}
declare enum WaveStrength {
	/** 平静水面，枚举值0 */
	CALM = 0,
	/** 轻微波纹，枚举值1 */
	SLIGHT = 1,
	/** 中等波纹，枚举值2 */
	MILD = 2,
	/** 较大波纹，枚举值3  */
	MODERATE = 3
}
export interface S3MWaterStyle {
	/** 水面颜色 */
	waterColor?: string;
	/** 水面大小级别 */
	waterBodySize?: WaterbodySize;
	/** 波浪方向 */
	waveDirection?: number;
	/** 波浪强度 */
	waveStrength?: WaveStrength;
}
export interface S3MTilesLayer extends S3MTilesLayerBase {
	s3mLayerType: S3MLayerType.S3M;
	url: string;
	isSceneLayer?: boolean;
	/** 水面特效 */
	waterStyle?: S3MWaterStyle;
	/** 纹理压缩格式为webp的情况下，当纹理红绿反转时，使用颜色通道RGB转BGR */
	isRGBTOBGR?: boolean;
	/** 图层的LOD层级切换距离缩放系数 */
	lodRangeScale?: number;
	/** 获取或者设置是否开启透明排序功能（OIT），默认是true */
	orderIndependentTranslucency?: boolean;
	/** 是否遮挡 */
	isOverlapDisplayed?: boolean;
	/** 与图标图层对应的文本图层名 */
	iconRelatedTextLayer?: string;
	/** 底部高程 */
	bottomAltitude?: number;
	/** 是否重新计算法线,默认否 */
	ignoreNormal?: boolean;
}
export interface S3MLayerGroup extends S3MTilesLayerBase {
	s3mLayerType: S3MLayerType.S3MGroup;
	subLayers: S3MLayer[];
}
export type S3MLayer = S3MTilesLayer | S3MLayerGroup;
/**地形影像等 provider 的类型 */
export declare enum ProviderType {
	SUPERMAP = 0,
	TIANDITU = 1,
	BING = 2,
	TEMPLATE = 3,
	SCT = 4,
	GRID = 5,
	CHANGGUANG = 6,
	LOCAL = 10
}
export interface LocalProvider {
	type: ProviderType.LOCAL;
	path: string;
}
/** SuperMap IServer 发布的服务的认证信息 */
export interface SuperMapCredential {
	/** 服务地址 */
	rootUrl: string;
	/** 类型 */
	type: "key" | "token";
	/** token 或 key 的值 */
	value: string;
}
/** SuperMap 地形图层参数 */
export interface SuperMapTerrainProvider {
	type: ProviderType.SUPERMAP;
	/** SuperMap terrain server的url. */
	url: string;
	/** 是否为iServer发布的TIN地形服务,stk地形设置为false。 默认 true */
	isSct?: boolean;
	/** 受否开启显影功能，开始后才能设置地形显影, 默认 false */
	invisibility?: boolean;
	/** 指示客户端是否应该向服务器请求每个瓦片水掩码(如果可用的话) */
	requestWaterMask?: boolean;
	/** 指示客户端是否应该从服务器请求额外的照明信息，如果可用，以每个顶点法线的形式. */
	requestVertexNormals?: boolean;
	/** 认证信息 */
	credential?: SuperMapCredential;
}
/** 天地图地形图层参数 */
export interface TiandituTerrainProvider {
	type: ProviderType.TIANDITU;
	/** 天地图访问 token */
	token: string;
}
/** SCT地形图层参数 */
export interface SCTTerrainProvider {
	type: ProviderType.SCT;
	/** SCT 地形的 url 数组 */
	urls: string[];
}
/** SuperMap 影像图层参数 */
export interface SuperMapImageProvider {
	type: ProviderType.SUPERMAP;
	/** 服务 url */
	url: string;
	/** 影像图层名称 */
	name?: string;
	/** 最小层级 默认 0 */
	minimumLevel?: number;
	/** 最大层级 默认 20 */
	maximumLevel?: number;
	/** 设置请求的地图服务的参数是否为transparent。 默认 true */
	transparent?: boolean;
	/** 影像图片格式，默认为png。 */
	tileFormat?: string;
	/** 影像的三维缓存密钥。 */
	cacheKey?: string;
	/** 认证信息 */
	credential?: SuperMapCredential;
	/** 球面影像平铺方案 */
	tilingSchemeType?: TilingSchemeType;
}
/** bing 影像图层参数 */
export interface BingMapsImageProvider {
	type: ProviderType.BING;
	/** 服务 url */
	url: string;
	/** bing 地图服务类型 */
	mapStyle: BingMapsStyle;
	/** bing 地图服务访问 key */
	key: string;
	/** 最小层级 默认 0 */
	minimumLevel?: number;
	/** 最大层级 默认 不限制 */
	maximumLevel?: number;
}
/** 天地图影像图层参数 */
export interface TiandituImageProvider {
	type: ProviderType.TIANDITU;
	/** 天地图服务类型 */
	mapStyle: TiandituMapsStyle;
	/** 天地图访问 token */
	token: string;
	/** 最小层级 默认 0 */
	minimumLevel?: number;
	/** 最大层级 默认 不限制 */
	maximumLevel?: number;
}
export declare enum TilingSchemeType {
	/** 基于Web墨卡托的投影转换*/
	WebMercatorTilingScheme = 0,
	/** 基于简单等距矩形的投影转换 */
	GeographicTilingScheme = 1,
	/** 基于火星坐标系的投影转换 */
	GCJ02TilingScheme = 2
}
/** 基于url的影像图层服务 */
export interface UrlTemplateImageProvider {
	type: ProviderType.TEMPLATE;
	/** 服务 url */
	url: string;
	/** 最小层级 默认 0 */
	minimumLevel?: number;
	/** 最大层级 默认 不限制 */
	maximumLevel?: number;
	/** url中用于 {s} 占位符的子域 */
	subdomains?: string[];
	/** 球面影像平铺方案 */
	tilingSchemeType?: TilingSchemeType;
}
export interface ChangGuangProvider {
	type: ProviderType.CHANGGUANG;
	/** 服务 url */
	url: string;
	/** 最小层级 默认 0 */
	minimumLevel?: number;
	/** 最大层级 默认 不限制 */
	maximumLevel?: number;
	/** url中用于 {s} 占位符的子域 */
	subdomains?: string[];
	/** 球面影像平铺方案 */
	tilingSchemeType?: TilingSchemeType;
}
/** 网格（经纬线） */
export interface GridImageProvider {
	type: ProviderType.GRID;
	/** 默认GeographicTilingScheme */
	tilingSchemeType?: TilingSchemeType;
	/** 网格单元的数量  默认8*/
	cells?: number;
	/** Color(1.0, 1.0, 1.0, 0.4)	绘制网格线的颜色 */
	color?: string;
	/** Color(0.0, 1.0, 0.0, 0.05)	绘制网格线发光的颜色。 */
	glowColor?: string;
	/** 用于渲染线条发光效果的线条宽度 默认6 */
	glowWidth?: number;
	/** backgroundColor 网格填充色 默认Color(0.0, 0.5, 0.0, 0.2) */
	backgroundColor?: string;
}
/**
 * bing 地图服务类型常量
 */
export declare enum BingMapsStyle {
	/**
	 * Aerial imagery.
	 */
	AERIAL = "Aerial",
	/**
	 * Aerial imagery with a road overlay.
	 */
	AERIAL_WITH_LABELS = "AerialWithLabels",
	/**
	 * Aerial imagery with a road overlay.
	 */
	AERIAL_WITH_LABELS_ON_DEMAND = "AerialWithLabelsOnDemand",
	/**
	 * Roads without additional imagery.
	 */
	ROAD = "Road",
	/**
	 * Roads without additional imagery.
	 */
	ROAD_ON_DEMAND = "RoadOnDemand",
	/**
	 * A dark version of the road maps.
	 */
	CANVAS_DARK = "CanvasDark",
	/**
	 * A lighter version of the road maps.
	 */
	CANVAS_LIGHT = "CanvasLight",
	/**
	 * A grayscale version of the road maps.
	 */
	CANVAS_GRAY = "CanvasGray",
	/**
	 * Ordnance Survey imagery. This imagery is visible only for the London, UK area.
	 */
	ORDNANCE_SURVEY = "OrdnanceSurvey",
	/**
	 * Collins Bart imagery.
	 */
	COLLINS_BART = "CollinsBart"
}
/**
 * 天地图服务类型常量
 */
export declare enum TiandituMapsStyle {
	/** 全球中文注记服务（经纬度）*/
	CIA_C = "cia_c",
	/** 全球中文注记服务（墨卡托 */
	CIA_W = "cia_w",
	/** 全球影像地图服务(经纬度) */
	IMG_C = "img_c",
	/** 全球矢量地图服务(墨卡托) */
	IMG_W = "img_w",
	/** 全球地形晕渲服务(经纬度) */
	TER_C = "ter_c",
	/** 全球地形晕渲服务(墨卡托) */
	TER_W = "ter_w",
	/** 全球矢量地图服务(经纬度) */
	VEC_C = "vec_c",
	/** 全球矢量地图服务(墨卡托) */
	VEC_W = "vec_w"
}
export interface Camera {
	/** 相机高度，单位：米。 */
	altitude: number;
	/** 相机的纬度，单位为度。*/
	latitude: number;
	/** 相机的经度，单位为度。*/
	longitude: number;
	/**方位角（上方向，即和北方的夹角），方位角的范围是0-360度。*/
	heading: number;
	/**俯仰角,角度 */
	pitch: number;
	/** 滚动角，角度 */
	roll: number;
}
export interface SkyboxResource {
	positiveX: string;
	negativeX: string;
	positiveY: string;
	negativeY: string;
	positiveZ: string;
	negativeZ: string;
}
export interface Atmosphere {
	/** 是否可见 */
	visible: boolean;
	/** 亮度 默认值 0, 当值为 -1 时显示为完全黑色 */
	brightnessShift?: number;
	/** 色调 默认值 0 */
	hueShift?: number;
	/** 饱和度 默认值 0, 当值为 -1 时为单色显示 */
	saturationShift?: number;
}
export interface Clouds {
	/** 是否可见 */
	visible: boolean;
	/** 云层纹理地址 */
	url: string;
}
/** 颜色校正类型 */
export interface ColorCorrectionType {
	/** 亮度 */
	brightness?: number;
	/** 对比度 */
	contrast?: number;
	/** 色调 */
	hue?: number;
	/** 饱和度 */
	saturation?: number;
	/** 颜色校正是否开启 */
	show?: boolean;
}
export interface Sun {
	/** 是否可见 */
	visible: boolean;
	/** 亮度 默认值 1*/
	glowFactor?: number;
}
export interface AddCount {
	flyCount: number;
	objectCount: number;
	audioCount: number;
	soundCount: number;
	objectLayerCount: number;
	screenLayerCount: number;
	particleLayerCount: number;
	layerCount: number;
	sceneCount: number;
}
export declare enum SlideTransitionType {
	/** 百叶窗 */
	windowBlinds = 1,
	/** 闪白 */
	shimmer = 2,
	/** 淡入 */
	fadeIn = 3,
	/** 左滑 */
	slideLeft = 4,
	/** 右滑 */
	slideRight = 5,
	/** 上滑 */
	slideTop = 6,
	/** 下滑 */
	slideBottom = 7,
	/** 推开 */
	pushAside = 8
}
export interface SlideTransition {
	type: SlideTransitionType;
	duration: number;
}
export interface Slide {
	/** 航线封面 */
	cover?: string;
	/** 当前幻灯片是否播放 */
	visible: boolean;
	/** 幻灯片翻页动画 */
	slideTransition?: SlideTransition;
	/** 播放方式自动播放/点击播放 */
	isAutoPlay: boolean;
	/** 播放延迟时间 */
	waitTime: number;
	/** 幻灯片内容是一条推演动画 */
	animation: AnimationParam;
	/** 动画id */
	id: number;
	/** 最近一次修改时间 */
	time: string;
	/** 对应屏幕图层内容 @deprecated */
	screenLayerData?: ScreenLayer;
	/** 添加的累计索引 */
	addCount?: AddCount;
}
/** 地图动画 */
export type AnimationParam = {
	/** 相机飞行动画 */
	fly?: CameraAnimation;
	/** 对象动画 */
	object?: ObjectAnimation[];
	/** 矢量对象图层动画 */
	objectLayer?: ObjectLayerAnimation[];
	/** 粒子对象图层动画 */
	particleLayer?: ParticleLayerAnimation[];
	/** 音频动画 */
	audio?: AudioAnimationParam;
	/** 音效动画 */
	sound?: SoundAnimation[];
	/** 屏幕动画 */
	screen?: ScreenAnimation[] | ScreenAnimationParam;
	/** 场景动画 */
	scene?: SceneAnimation[];
	/** 影像/s3m/地形动画 */
	layer?: LayerAnimation[];
};
export interface ScreenAnimationParam {
	type: "screen";
	version?: number;
	items: (ScreenImageItem | ScreenVideoItem | ScreenTextItem)[];
}
export interface ScreenImageItem extends ScreenItemBase {
	type: "image";
	url: string;
}
export interface ScreenVideoItem extends ScreenItemBase {
	type: "video";
	url: string;
}
export interface ScreenTextItem extends ScreenItemBase {
	type: "text";
	text: string;
	style: Partial<ScreenTextStyle>;
}
/** css style */
export interface ScreenTextStyle {
	color: string;
	["font-size"]: string;
	["font-family"]: string;
	["text-shadow"]: string;
	["background-color"]: string;
	border: string;
	["border-radius"]: string;
	opacity: string;
}
export interface ScreenItemBase {
	/** 屏幕动画名字 */
	name: string;
	/** 对象锚点 默认 top-left */
	anchor?: TAnchor;
	/** 图片相对屏幕的位置 范围 0 - 100 */
	position: {
		x: number;
		y: number;
	};
	size?: {
		/** pixle */
		width?: number;
		height?: number;
		/** percent */
		maxWidth?: number;
		maxHeight?: number;
	};
	animations: IScreenAnimation[];
}
export type IScreenAnimation = ScreenEnterAnimation | ScreenExitAnimation | ScreenMediaAnimation;
export interface IScreenAnimationBase {
	startTime: number;
	duration: number;
}
export interface ScreenEnterAnimation extends IScreenAnimationBase {
	type: "enter";
	effect: ScreenEnterFly | ScreenEnterAppear;
}
export interface ScreenExitAnimation extends IScreenAnimationBase {
	type: "exit";
	effect: ScreenExitFly | ScreenExitDisappear;
}
export interface ScreenMediaAnimation extends IScreenAnimationBase {
	type: "media";
	action: "play";
}
export interface ScreenEnterFly {
	type: "fly";
	from: TDirection;
}
export interface ScreenEnterAppear {
	type: "appear";
}
export interface ScreenExitFly {
	type: "fly";
	to: TDirection;
}
export interface ScreenExitDisappear {
	type: "disappear";
}
export type TAnchor = TDirection | "center";
export type TDirection = "top" | "bottom" | "left" | "right" | "top-left" | "top-right" | "bottom-left" | "bottom-right";
export type LayerAnimation = LayerVisibilityAnimation | TerrainSetAnimation;
export interface LayerVisibilityAnimation {
	/** 动画名称 */
	name: string;
	/** 图层类型 */
	layerType: "s3m" | "image" | "primitive";
	/** 图层名 */
	layerName: string;
	/** 显隐状态 */
	visibility: boolean;
	/** 开始时间 单位 秒*/
	startTime: number;
}
export interface TerrainSetAnimation {
	/** 动画来自的图层名，可以为空 */
	layerName: string;
	/** 动画名称 */
	name: string;
	/** 地形参数 */
	terrian: TerrainProvider | null;
	/** 开始时间 单位 秒*/
	startTime: number;
}
export type SceneAnimation = SceneWeather;
export declare enum SceneAnimationType {
	WEATHER = "weather"
}
export interface SceneWeather {
	type: SceneAnimationType.WEATHER;
	/** 场景动画标题 */
	name: string;
	/** 开始时间 单位 秒*/
	startTime: number;
	/** 天气状态 */
	weatherStyle: Rain | Snow | null;
}
export type AudioAnimationParam = AudioAnimation[] | {
	/** 单个语音文件路径或 base64 字符串 */
	audio: string;
	animations: AudioAnimation[];
};
export interface AudioAnimation {
	/** 语音标题 */
	name: string;
	/** 开始时间 单位 秒*/
	startTime: number;
	/**
	 * 持续时间 单位 秒
	 * 需要通过将参数语音合成后读取音频文件的时长来设置此字段
	 */
	duration: number;
	/** 语音合成参数 */
	param: AudioParam$1;
	/** 音频 url 或 base64 字符串数据 */
	content?: string;
}
interface AudioParam$1 {
	/** 语音文本内容 */
	text: string;
	/** 发音人 */
	voice?: string;
	/** 语速 默认 1 */
	speed?: number;
	/** 音量 默认 1*/
	volume?: number | undefined;
}
/** 音频字幕 */
export interface AudioSubtitle {
	/** 开始时间  单位 秒 */
	startTime: number;
	/** 结束时间  单位 秒 */
	endTime: number;
	/** 文本 */
	text: string;
}
export interface SoundAnimation {
	name?: string;
	url: string;
	/** 开始时间  单位 秒 */
	startTime: number;
	/** 音量0-1 默认1 */
	volume?: number;
	/** 播放时长，不设置(undefined)则播放一次,-1表示循环播放 */
	duration?: number;
}
/**
 * 相机飞行动画
 *
 * string 类型为 fpf 飞行文件路径
 */
export type CameraAnimation = string | FlyRoute;
/** 相机飞行路线 */
export interface FlyRoute {
	/** 路径名 */
	routeName: string;
	/** 是否可以自由转动朝向 */
	/** 是否可以自由俯仰 */
	/** 飞行站点 */
	stops: (FlyRouteStop | FlyCircleStop | FlyAlongLine | FlyPresetStop)[];
}
/** 路径飞行站点参数 */
export interface FlyRouteStop {
	/** 站点名 */
	stopName: string;
	/** 到下一个站点的时间 */
	duration: number;
	/** 在本站点停留的时间 */
	waitTime: number;
	/** 站点经度 */
	longitude: number;
	/** 站点纬度 */
	latitude: number;
	/** 站点高度 */
	height: number;
	/** 站点朝向角度 */
	heading: number;
	/** 站点俯仰角度 */
	tilt: number;
}
/** 绕点飞行站点参数 */
export interface FlyCircleStop {
	/** 站点名 */
	stopName: string;
	/** 飞行前停留的时间 */
	waitTime: number;
	/** 绕点飞行的时间 */
	circleTime: number;
	/** 绕点飞行后到下一站点的时间 */
	duration: number;
	/** 开始点经度 */
	startLongitude: number;
	/** 开始点纬度 */
	startLatitude: number;
	/** 开始点高度 */
	startHeight: number;
	/** 要环绕的点的经度 */
	centerLongitude: number;
	/** 要环绕的点的纬度 */
	centerLatitude: number;
	/** 要环绕的点的高度 */
	centerHeight: number;
	/**
	 * 要旋转的角度。如 360 表示绕点旋转一周。
	 *
	 * 正数代表逆时针旋转，负数代表顺时针旋转。
	 */
	degress: number;
	/** 起始朝向角度 */
	startHeading?: number;
	/** 俯仰角度 */
	startTilt?: number;
}
/** 沿线贴地飞行参数 */
export interface FlyAlongLine {
	/** 站点名 */
	stopName: string;
	/** 飞行前停留的时间 */
	waitTime: number;
	/** 飞行时间 */
	lineFlyTime: number;
	/** 到下一个站点的时间 */
	duration: number;
	/**
	 * 经纬度高度点串数组
	 * 至少三个点且个数为3的倍数,格式： [经度，纬度，高度，经度，纬度，高度...]
	 */
	line: [
		number,
		number,
		number,
		...number[]
	];
	/** 是否贴地线 */
	clampToCround?: boolean;
	/** 相机跟随参数 */
	headingPitchRange?: {
		heading?: number;
		pitch?: number;
		range?: number;
	};
	/** 转向时间(转180度所需时间) 默认9s*/
	turnDuration?: number;
	/** 飞行时轨迹（默认不显示）*/
	trackingLineParam?: {
		color: string;
		width: number;
	};
}
/** 预制飞行轨迹 */
export interface FlyPresetStop {
	/** 站点名 */
	stopName: string;
	/** 飞行前停留的时间 */
	waitTime: number;
	/** 预制飞行耗时 */
	flyTime: number;
	/** 预制飞行后到下一站点的时间 */
	duration: number;
	/** 预制飞行路线参数 */
	presetParam: FlyPresetParam;
}
export declare enum FlyPresetType {
	/** 推近-环绕-拉远  */
	forward_around_backward = "forward_around_backward",
	/** 推近 */
	forward = "forward",
	/** 拉远 */
	backward = "backward"
}
export interface FlyForwardAroundBackwardParam {
	/** 预制类型 */
	presetType: FlyPresetType.forward_around_backward;
	/** 飞行起点 */
	start: Vector3;
	/** 焦点 */
	focus: Vector3;
	/** 环绕角度，正数代表逆时针旋转，负数代表顺时针旋转,默认-120*/
	roundDegrees?: number;
	/** 环绕时间占比 */
	roundTimeRadio?: number;
	/** 推进比率(推进距离占起点焦点间距比率)，默认0.8*/
	forwardDistanceRatio?: number;
	/** 是否需要拉远 , 默认不拉远 */
	backwardAfterAround?: boolean;
	/** 站点朝向角度 */
	heading?: number;
	/** 站点俯仰角度 */
	tilt?: number;
}
export interface FlyForwardParam {
	/** 预制类型 */
	presetType: FlyPresetType.forward;
	/** 飞行起点 */
	start: Vector3;
	/** 焦点 */
	focus: Vector3;
	/** 推进比率(推进距离占起点焦点间距比率)，默认0.8*/
	forwardDistanceRatio?: number;
	/** 站点朝向角度 */
	heading?: number;
	/** 站点俯仰角度 */
	tilt?: number;
}
export interface FlyBackwardParam {
	/** 预制类型 */
	presetType: FlyPresetType.backward;
	/** 飞行起点 */
	start: Vector3;
	/** 焦点 */
	focus: Vector3;
	/** 远离比率(远离距离与起点焦点间距比率)，默认4*/
	backwardDistanceRatio?: number;
	/** 站点朝向角度 */
	heading?: number;
	/** 站点俯仰角度 */
	tilt?: number;
}
export type FlyPresetParam = FlyForwardAroundBackwardParam | FlyForwardParam | FlyBackwardParam;
/** {@link FlyRoute} 中站点参数转换后相机实际飞行经过的站点参数 */
export interface FlyStop {
	/** 站点经度 */
	longitude: number;
	/** 站点纬度 */
	latitude: number;
	/** 站点高度 */
	height: number;
	/** 到下一个站点的时间 */
	duration: number;
	/** 在本站点停留的时间 */
	waitTime: number;
}
/** 对象动画 */
export type ObjectAnimation = TranslationAnimation | LineGrowAnimation | ColorAnimation | RotationAnimation | VisibilityAnimation | PolygonGrowAnimation;
/** 矢量图层动画 */
export type ObjectLayerAnimation = (Omit<TranslationAnimation, "target"> | Omit<LineGrowAnimation, "target"> | Omit<ColorAnimation, "target"> | Omit<RotationAnimation, "target"> | Omit<VisibilityAnimation, "target"> | Omit<PolygonGrowAnimation, "target">) & {
	layerName: string;
};
export type ParticleLayerAnimation = Omit<VisibilityAnimation, "target"> & {
	layerName: string;
};
export interface AnimatorGeneral {
	name: string;
	/** 开始时间，单位秒 */
	startTime: number;
	/** 动画持续时间，单位秒 */
	duration: number;
	/** 重复次数 */
	repeatCount?: number;
	/** 矢量图层名 */
	layerName?: string;
	/** 对象 id */
	target: string;
}
export interface LineGrowAnimation extends AnimatorGeneral {
	type: AnimatorType.LINEGROW;
	/** 逆生长 */
	isReverse?: boolean;
}
export declare enum PolygonGrowType {
	Proportion = 0 /** 按比例生长 */,
	Uniform = 1 /** 匀速生长 */,
	AlongDirection = 2 /** 按方向展开 */
}
export interface PolygonGrowAnimation extends AnimatorGeneral {
	type: AnimatorType.POLYGONGROW;
	/** 缩小 */
	isReduce?: boolean;
	/** 初始点（默认为形心） */
	initial?: Vector3;
	/** 生长方式 */
	growType?: PolygonGrowType;
	/** 生长方向
	 * 0:西->东
	 * 1:东->西
	 * 2:北->南
	 * 3:南->北
	 */
	directionType?: number;
}
export interface TranslationAnimation extends AnimatorGeneral {
	type: AnimatorType.TRANSLATION;
	/**
	 * 经纬度高度点串数组
	 *
	 * 至少三个点且个数为3的倍数,格式： [经度，纬度，高度，经度，纬度，高度...]
	 */
	translations: number[];
	/** 反向位移，默认false */
	isReverse?: boolean;
}
export interface ColorAnimation extends AnimatorGeneral {
	type: AnimatorType.COLOR;
	/**
	 * 颜色。至少两个
	 * 支持 css 风格的颜色字符串: #rgb, #rgba, #rrggbb, #rrggbbaa, rgb(), rgba(), hsl(), hsla()
	 */
	color: [
		string,
		string,
		...string[]
	];
	/** 切换一次颜色的间隔时间，单位 秒*/
	interval: number;
	/** 颜色之间是否有过渡, 默认 false */
	lerp?: boolean;
}
export interface VisibilityAnimation extends AnimatorGeneral {
	type: AnimatorType.VISIBILITY;
	/** 开始动画时是否显示 */
	initialShow: boolean;
	/** 切换一次显隐的时间，单位 秒。若和duration一样，则整个动画显隐切换一次 */
	interval: number;
}
export interface RotationAnimation extends AnimatorGeneral {
	type: AnimatorType.ROTATION;
	/** 增量旋转,默认false */
	rotationIncremental?: boolean;
	/** 旋转是否沿速度方向 */
	orientationAlongVelocity?: boolean;
	rotations?: HeadingPitchRoll | HeadingPitchRoll[];
}
export declare enum AnimatorType {
	/** 位移类型动画 */
	TRANSLATION = 0,
	/** 旋转类型动画 */
	ROTATION = 1,
	/** 缩放类型动画 */
	SCALE = 2,
	/** 线生长动画 */
	LINEGROW = 3,
	/** 颜色动画 */
	COLOR = 4,
	/** 显隐动画 */
	VISIBILITY = 5,
	/** 面生长动画 */
	POLYGONGROW = 6
}
export interface Vector3 {
	x: number;
	y: number;
	z: number;
}
/** 二维点 */
export interface Vector2 {
	/** 横坐标，x对应longitude */
	x: number;
	/** 纵坐标，y对应latitude */
	y: number;
}
/** 椭球体类型 */
export declare enum EllipsoidType {
	/** CGCS2000椭球体，其x,y,z方向的半径分别为6378137.0, 6378137.0, 6356752.31 */
	CGCS2000 = "CGCS2000",
	/** 一个球的实例，默认是圆球模式，其x,y,z方向半径都为6378137.0 */
	WGS84 = "WGS84",
	/** 西安80椭球体，其x,y,z方向的半径分别为6378140.0, 6378140.0, 6356755.29 */
	XIAN80 = "XIAN80"
}
/** 贴地类型 */
export declare enum ClampType {
	/** 空间模式 */
	Space = 0,
	/** 贴地模式 */
	Ground = 1,
	/** 贴对象模式 */
	S3mModel = 2,
	/** 栅格化模式 */
	Raster = 3
}
/**
 * 贴地方式
 */
export declare enum ClassificationType {
	NONE = "NONE",
	TERRAIN = "TERRAIN",
	S3M_TILE = "S3M_TILE",
	BOTH = "BOTH"
}
export interface HeadingPitchRoll {
	heading: number;
	pitch: number;
	roll: number;
}
export interface DistanceDisplayCondition {
	near?: number;
	far?: number;
}
export interface NearFarScalar {
	near: number;
	nearValue: number;
	far: number;
	farValue: number;
}
/** Entity关联点，画在Entity.position处 */
export interface PointGraphics {
	/** 大小pixelSize */
	size?: number;
	/** 填充颜色 */
	color?: string | PropertyAnimation<string>;
	/** 轮廓颜色，默认黑色 */
	outlineColor?: string;
	/** 轮廓宽度，默认0 */
	outlineWidth?: number;
	/** 遮挡深度 */
	disableDepthTestDistance?: number;
	/** 随距离缩放参数，默认undefine表示不随距离缩放 */
	scaleByDistance?: NearFarScalar;
	/** 显隐 */
	show?: boolean | PropertyAnimation<boolean>;
	/** 可见范围 */
	distanceDisplayCondition?: DistanceDisplayCondition;
	/** 相对地形的位置 */
	heightReference?: HeightReference;
}
export interface ModelGraphics {
	/** gltf uri */
	uri?: string;
	/** 缩放 */
	scale?: number;
	/** 显隐 */
	show?: boolean | PropertyAnimation<boolean>;
	/** 可见范围 */
	distanceDisplayCondition?: DistanceDisplayCondition;
	/** 最小可见像素大小 */
	minimumPixelSize?: number;
	/** 相对地形的位置 */
	heightReference?: HeightReference;
	/** 是否播放骨骼动画 */
	runAnimations?: boolean;
	/** 模型轮廓 */
	silhouetteSize?: number;
	silhouetteColor?: string;
}
/**
 * Represents the position relative to the terrain.
 */
export declare enum HeightReference {
	/**
	 * The position is absolute.
	 */
	NONE = 0,
	/**
	 * The position is clamped to the terrain.
	 */
	CLAMP_TO_GROUND = 1,
	/**
	 * The position height is the height above the terrain.
	 */
	RELATIVE_TO_GROUND = 2
}
export declare enum VerticalOrigin {
	top = 1,
	center = 2,
	baseline = 3,
	bottom = 4
}
declare enum HorizontalOrigin {
	left = 1,
	center = 2,
	right = 3
}
declare enum LabelStyle {
	FILL = 1,
	FILL_AND_OUTLINE = 2,
	OUTLINE = 3
}
export interface LabelGraphics {
	/** 文本内容 */
	text?: string;
	/** 水平对齐方式 , 默认center*/
	horizontalOrigin?: HorizontalOrigin;
	/** 竖直对齐方式 , 默认center*/
	verticalOrigin?: VerticalOrigin;
	/** 字体样式，默认字体'10px sans-serif'*/
	font?: string;
	/** 默认FILL */
	style?: LabelStyle;
	/** 文字填充色 */
	fillColor?: string | PropertyAnimation<string>;
	/** 文字填轮廓色 */
	outlineColor?: string | PropertyAnimation<string>;
	/** 描边宽度 ，默认1.0*/
	outlineWidth?: number;
	/** 背景显示否，默认false */
	showBackground?: boolean;
	/** 背景色，不设置表示没有背景 */
	backgroundColor?: string | PropertyAnimation<string>;
	/** 背景边框宽度 , 默认0*/
	backgroundPaddingSize?: number;
	/** 文字遮挡深度 */
	disableDepthTestDistance?: number;
	/** 随距离缩放参数，默认undefine表示不随距离缩放 */
	scaleByDistance?: NearFarScalar;
	/** 缩放比例，默认1.0 */
	scale?: number;
	/** 显隐 */
	show?: boolean | PropertyAnimation<boolean>;
	/** 可见范围 */
	distanceDisplayCondition?: DistanceDisplayCondition;
	/** 局部坐标系偏移量，单位米 */
	eyeOffset?: Vector3;
	/** 屏幕偏移量，单位px */
	pixelOffset?: Vector2;
	/** 相对地形的位置 */
	heightReference?: HeightReference;
}
export interface TerrainLabel {
	/** 文本内容 */
	text?: string;
	/** 文本走向 */
	headingAngle?: number;
	/** 字体样式，默认字体'10px sans-serif'*/
	font?: string;
	/** 默认FILL */
	style?: LabelStyle;
	/** 文字填充色 */
	fillColor?: string;
	/** 文字填轮廓色 */
	outlineColor?: string;
	/** 背景显示否，默认false */
	showBackground?: boolean;
	/** 背景色，不设置表示没有背景 */
	backgroundColor?: string;
	/** 背景边框宽度 , 默认0*/
	backgroundPaddingSize?: number;
	/** 缩放比例，默认1.0 */
	scale?: number;
	/** 显隐 */
	show?: boolean | PropertyAnimation<boolean>;
	/** 可见范围 */
	distanceDisplayCondition?: DistanceDisplayCondition;
}
export interface BillboardGraphics {
	/** 图片路径 */
	image?: string;
	/** 水平对齐方式 , 默认center*/
	horizontalOrigin?: HorizontalOrigin;
	/** 竖直对齐方式 , 默认center*/
	verticalOrigin?: VerticalOrigin;
	/** 遮挡深度 */
	disableDepthTestDistance?: number;
	/** 随距离缩放参数，默认undefine表示不随距离缩放 */
	scaleByDistance?: NearFarScalar;
	/** 图片高，单位px */
	height?: number;
	/** 图片宽，单位px */
	width?: number;
	/** 显隐 */
	show?: boolean | PropertyAnimation<boolean>;
	/** 可见范围 */
	distanceDisplayCondition?: DistanceDisplayCondition;
	/** 局部坐标系偏移量，单位米 */
	eyeOffset?: Vector3;
	/** 屏幕偏移量，单位px */
	pixelOffset?: Vector2;
	/** 相对地形的位置 */
	heightReference?: HeightReference;
}
export declare enum LineType {
	/** 实线 */
	solid = 1,
	/** 虚线型 */
	dashed = 2,
	/** 轮廓线 */
	contour = 3,
	/** 箭头线 */
	arrow = 4,
	/** 光晕线 */
	halo = 5,
	/** 尾迹线 */
	wake = 6,
	/** 动态线 */
	dynamic = 7
}
export interface PolylineGraphicsBase {
	positions?: number[] | Vector3[] | Circle | Rectangle | Spline; /** positions */
	growAnimation?: PositionsGrowAnimation | null;
	/** 线宽 */
	width?: number;
	/** 贴地方式 undefined === ClassificationType.NONE */
	classificationType?: ClassificationType;
	/** 显隐 */
	show?: boolean | PropertyAnimation<boolean>;
	/** 可见范围 */
	distanceDisplayCondition?: DistanceDisplayCondition;
	/** 离地高度 */
	hMax?: number;
	/** 是否被地形遮挡 默认false被遮挡*/
	depthFailShow?: boolean;
}
export type PolylineGraphics = SolidLine | DashedLine | ContourLine | ArrowLine | HaloLine | WakeLine | DynamicLine;
export interface SolidLine extends PolylineGraphicsBase {
	lineType: LineType.solid; /** 线型 */
	/** 填充颜色 */
	material?: string | PropertyAnimation<string>;
}
export interface DashedLine extends PolylineGraphicsBase {
	lineType: LineType.dashed; /** 线型 */
	material?: {
		/** 前景色 */
		color?: string | PropertyAnimation<string>;
		/** 背景色 */
		gapColor?: string | PropertyAnimation<string>;
		/** 间隔 */
		dashLength?: number;
	};
}
export interface ContourLine extends PolylineGraphicsBase {
	lineType: LineType.contour; /** 线型 */
	material?: {
		/** 内部颜色outlineInnerColor */
		color?: string | PropertyAnimation<string>;
		/** 轮廓宽outlineOuterWidth */
		outlineWidth?: number;
		/** 轮廓颜色outlineOuterColor */
		outlineColor?: string | PropertyAnimation<string>;
	};
}
export interface ArrowLine extends PolylineGraphicsBase {
	lineType: LineType.arrow; /** 线型 */
	material?: string | PropertyAnimation<string>;
}
export interface HaloLine extends PolylineGraphicsBase {
	lineType: LineType.halo; /** 线型 */
	material?: {
		color?: string | PropertyAnimation<string>;
		/** 光晕强度glowLinePower */
		glowPower?: number | PropertyAnimation<number>;
	};
}
export interface WakeLine extends PolylineGraphicsBase {
	lineType: LineType.wake; /** 线型 */
	material?: {
		color?: string | PropertyAnimation<string>;
		/** 尾迹线占比trailLinePercent */
		trailLength?: number;
		/** 尾迹时长trailLinePeroid */
		period?: number;
	};
}
export interface DynamicLine extends PolylineGraphicsBase {
	lineType: LineType.dynamic; /** 线型 */
	material?: {
		/** 内部颜色outlineInnerColor */
		color?: string | PropertyAnimation<string>;
		/** 轮廓宽outlineOuterWidth */
		outlineWidth?: number;
		/** 轮廓颜色outlineOuterColor */
		outlineColor?: string | PropertyAnimation<string>;
		/** 速度 */
		speedRatio?: number;
	};
}
export interface Circle {
	center: Vector3;
	radius: number;
	pointCount?: number;
}
export interface Rectangle {
	center: Vector3;
	w: number;
	h: number;
	heading: number;
}
export declare enum SLineType {
	CatmullRom = 1,
	Hermite = 2
}
export interface Spline {
	splineType?: SLineType;
	controlPoints: Vector3[] | number[];
	pointCount?: number;
}
export interface PolygonHierarchy {
	positions: number[] | Vector3[];
	holes?: PolygonHierarchy[]; /** 面上的岛洞 */
}
export declare enum FillType {
	/** 无填充 */
	nofill = 0,
	/** 纯色面  */
	solid = 1,
	/** 网格 */
	gridding = 2,
	/** 条纹 */
	stripe = 3,
	/** 图片 */
	image = 4,
	/** 羽化 */
	feather = 5
}
export interface PolygonGraphicsBase {
	/** positions */
	hierarchy?: PolygonHierarchy | Circle | Rectangle;
	/** 贴地方式 undefined === ClassificationType.NONE */
	classificationType?: ClassificationType;
	/** 是否描边 */
	outline?: boolean;
	/** 描边宽度，默认1.0 */
	outlineWidth?: number;
	/** 描边色，默认BLACK	**/
	outlineColor?: string;
	/** 显隐 */
	show?: boolean | PropertyAnimation<boolean>;
	/** 可见范围 */
	distanceDisplayCondition?: DistanceDisplayCondition;
	/** 离地高度 */
	height?: number;
	/** 白膜高度 */
	extrudedHeight?: number;
	/** 贴图旋转角度 */
	stRotation?: number;
}
export interface NofillPolygon extends PolygonGraphicsBase {
	fillType: FillType.nofill; /** 填充模式 */
}
export interface SolidPolygon extends PolygonGraphicsBase {
	fillType: FillType.solid; /** 填充模式 */
	material?: string | PropertyAnimation<string>; /** 填充色 defualt white*/
}
export interface GriddingPolygon extends PolygonGraphicsBase {
	fillType: FillType.gridding; /** 填充模式 */
	material?: {
		color?: string | PropertyAnimation<string>;
		cellAlpha?: number;
		lineCount?: number;
		lineThickness?: number;
		lineOffset?: number;
	};
}
export interface StripePolygon extends PolygonGraphicsBase {
	fillType: FillType.stripe; /** 填充模式 */
	material?: {
		evenColor?: string | PropertyAnimation<string>;
		oddColor?: string | PropertyAnimation<string>;
		repeat?: number;
		offset?: number;
		orientationHorizontal?: boolean;
	};
}
export interface ImagePolygon extends PolygonGraphicsBase {
	fillType: FillType.image; /** 填充模式 */
	material?: {
		/** 填充图片url */
		image?: string;
		/** X/Y方向重复填充次数，默认（1，1） */
		repeat?: Vector2;
		/** 应用于图像的颜色，默认白色 */
		color?: string;
		/** 图片是否应用透明，默认false */
		transparent?: boolean;
	};
}
export interface FeatherPolygon extends PolygonGraphicsBase {
	fillType: FillType.feather; /** 填充模式 */
	/** 应用于图像的颜色，默认白色 */
	material?: {
		color?: string;
		/** 羽化边缘透明度 区值0～1，默认值0.2 */
		edgeAlpha?: number;
	};
}
export type PolygonGraphics = NofillPolygon | SolidPolygon | GriddingPolygon | StripePolygon | ImagePolygon | FeatherPolygon;
export interface WallGraphics {
	/** 位置数组 */
	positions?: number[] | Vector3[] | Circle | Rectangle | Spline;
	growAnimation?: PositionsGrowAnimation | null;
	/** 显隐 */
	show?: boolean | PropertyAnimation<boolean>;
	/** 可见范围 */
	distanceDisplayCondition?: DistanceDisplayCondition;
	/** 填充颜色 */
	material?: string | PropertyAnimation<string>;
	/** 填充符号 */
	imageMaterial?: {
		/** 填充图片url */
		image: string;
		/** X/Y方向重复填充次数，默认（1，1） */
		repeat?: Vector2;
	};
	/** 墙高度 */
	wallHeight?: number;
}
export interface RainbowLine {
	/** 位置数组 格式 [经度，纬度，经度，纬度...] */
	positions?: number[];
	/** 宽度 */
	width?: number;
	/** 显隐 */
	show?: boolean;
	/** 离地高度 */
	hMax?: number;
	/** 彩虹颜色数组，默认七种颜色 */
	colors?: ColorNumber[];
}
export interface Entity {
	id?: string;
	position?: Vector3 | PropertyAnimation<Vector3>;
	orientation?: HeadingPitchRoll | PropertyAnimation<HeadingPitchRoll>;
	/** 朝向设置是否沿速度方向，默认否（朝向设置基于正北方向） */
	orientationAlongVelocity?: boolean;
	label?: LabelGraphics;
	billboard?: BillboardGraphics;
	model?: ModelGraphics;
	point?: PointGraphics;
	polyline?: PolylineGraphics;
	polygon?: PolygonGraphics;
	wall?: WallGraphics;
	terrainlabel?: TerrainLabel;
	rainbowline?: RainbowLine;
	/** !!updateModify时show和其他属性更改互斥，否则导致界面卡死 */
	show?: boolean;
	name?: string;
	description?: string;
	/** 父亲的id */
	parent?: string;
	/** 多媒体对象ID */
	mediaID?: {
		id: number;
		url: string;
	}[];
}
/** entity附加属性 */
export interface EntityAdditionType {
	[key: string]: string | number | boolean | undefined | null;
	key: string;
	value: string;
}
export interface PropertyAnimation<T> {
	/** 属性动画属性值站点 */
	values: [
		T,
		T,
		...T[]
	];
	/** 动画持续时间，单位秒 */
	duration: number;
	/** 默认值，动画暂停时的值 */
	defaultValue?: T;
	/** 时间偏移量 */
	timeOffset?: number;
}
export interface PositionsGrowAnimation {
	duration: number; /** 持续时间 */
	/** 是否逆生长 */
	isReverse?: boolean;
	/** 是否擦除效果 */
	isErase?: boolean;
	/** 时间偏移量 */
	timeOffset?: number;
}
export interface GregorianDate {
	/**
	 * 年
	 */
	year: number;
	/**
	 * 月，范围 [1, 12]
	 */
	month: number;
	/**
	 * 日，从 1 开始
	 */
	day: number;
	/**
	 * 小时，范围 [0, 23].
	 */
	hour: number;
	/**
	 * 分钟，范围 [0, 59].
	 */
	minute: number;
	/**
	 * 秒 [0, 60], 60 代表闰秒.
	 */
	second: number;
	/**
	 * 毫秒，范围 [0.0, 1000.0).
	 */
	millisecond: number;
	/**
	 * 此时间是否为闰秒
	 */
	isLeapSecond?: boolean;
}
export declare enum WeatherType {
	/** 没有天气特效 */
	NONE = 1,
	/** 雨 */
	RAIN = 2,
	/** 雪 */
	SNOW = 3
}
export interface Rain {
	type: WeatherType.RAIN;
	angle?: number;
	speed?: number;
	density?: number;
}
export interface Snow {
	type: WeatherType.SNOW;
	angle?: number;
	speed?: number;
	density?: number;
}
/** 粒子特效图层 */
export interface ParticleLayer {
	visible: boolean;
	name: string;
	particles: Particle[];
}
/** 粒子特效 */
export interface Particle extends Partial<ParticleParam> {
	id: string;
	name: string;
	url: string;
}
export interface ParticleParam {
	/**
	 * 粒子发射对象。可以是坐标，或者一个entity，或者相机。
	 * todo 目前仅支持坐标
	 */
	emitter: [
		number,
		number,
		number
	];
	/** 旋转角度 */
	orientation: [
		number,
		number,
		number
	];
	isLocal: boolean;
	isBillboardBased: boolean;
	blendMode: ParticleBlendMode;
	updateSpeed: number;
	emitRate: number;
	minEmitPower: number;
	maxEmitPower: number;
	minSize: number;
	maxSize: number;
	minScaleX: number;
	minScaleY: number;
	maxScaleX: number;
	maxScaleY: number;
	minLifeTime: number;
	maxLifeTime: number;
	/** 时长 */
	targetStopDuration: number;
	minAngularSpeed: number;
	maxAngularSpeed: number;
	minInitialRotation: number;
	maxInitialRotation: number;
	limitVelocityDamping: number;
	/** 粒子在三个轴上受到的力 */
	gravity: [
		number,
		number,
		number
	];
	particleEmitterType: ParticleEmitterType;
	color1: [
		number,
		number,
		number,
		number
	];
	color2: [
		number,
		number,
		number,
		number
	];
	colorDead: [
		number,
		number,
		number,
		number
	];
	/** 需要设置  targetStopDuration */
	emitRateGradients: ParticleGradient[];
	velocityGradients: ParticleGradient[];
	/** 需要设置 limitVelocityDamping */
	limitVelocityGradients: ParticleGradient[];
	dragGradients: ParticleGradient[];
	/** 需要设置  targetStopDuration */
	startSizeGradients: ParticleGradient[];
	sizeGradients: ParticleGradient[];
	/** 需要设置  targetStopDuration */
	lifeTimeGradients: ParticleGradient[];
	colorGradients: ParticleColorGradient[];
	angularSpeedGradients: ParticleGradient[];
}
declare enum ParticleBlendMode {
	OneOne = 0,
	Standard = 1,
	Add = 2,
	Multiply = 3,
	MultiplyAdd = 4
}
export interface ParticleGradient {
	gradient: number;
	factor1: number;
	factor2: number;
}
export interface ParticleColorGradient {
	gradient: number;
	color1: [
		number,
		number,
		number,
		number
	];
	color2: [
		number,
		number,
		number,
		number
	];
}
export type ParticleEmitterType = BoxParticleEmitter | ConeParticleEmitter | CylinderParticleEmitter | HemisphericParticleEmitter | PointParticleEmitter | SphereParticleEmitter;
export interface BoxParticleEmitter {
	type: "BoxParticleEmitter";
	direction1: [
		number,
		number,
		number
	];
	direction2: [
		number,
		number,
		number
	];
	minEmitBox: [
		number,
		number,
		number
	];
	maxEmitBox: [
		number,
		number,
		number
	];
}
export interface ConeParticleEmitter {
	type: "ConeParticleEmitter";
	radius: number;
	angle: number;
	directionRandomizer: number;
	radiusRange: number;
	heightRange: number;
	emitFromSpawnPointOnly: boolean;
}
export interface CylinderParticleEmitter {
	type: "CylinderParticleEmitter";
	radius: number;
	height: number;
	radiusRange: number;
	directionRandomizer: number;
}
export interface HemisphericParticleEmitter {
	type: "HemisphericParticleEmitter";
	radius: number;
	radiusRange: number;
	directionRandomizer: number;
}
export interface PointParticleEmitter {
	type: "PointParticleEmitter";
	direction1: [
		number,
		number,
		number
	];
	direction2: [
		number,
		number,
		number
	];
}
export interface SphereParticleEmitter {
	type: "SphereParticleEmitter";
	radius: number;
	radiusRange: number;
	directionRandomizer: number;
}
/**  颜色。分别对应 rgba, 数字范围 0 - 1 */
export type ColorNumber = [
	number,
	number,
	number,
	number
];
/** 等高设置 */
export interface HypsometricSetting {
	/**
	 * line: 等高线
	 * region: 等高面
	 * line_region：同时使用等高线等高面
	 * none: 关闭等高显示
	 */
	mode: "line" | "region" | "line_region" | "none";
	/** 等高线颜色 */
	lineColor: ColorNumber;
}
/** 扫描线模式 */
export declare enum ScanEffectMode {
	/** 扫描线 */
	LINE = 0,
	/** 扫描圈 */
	CIRCLE = 1
}
export interface ScanEffect {
	/** 是否显示 */
	show: boolean;
	/** 扫描线模式 */
	mode: ScanEffectMode;
	/**  颜色。分别对应 rgba, 默认 [1,1,1,1] */
	color: ColorNumber;
	/** 纹理地址 */
	texture: string;
	/** 线宽。单位 米 */
	width: number;
	/** 时长。单位 秒 */
	period: number;
	/** 速度。单位 米/秒 */
	speed: number;
	/**
	 * 线参数
	 * 在 'LINE' 模式下，需要设置 direction。默认按自西向东运动
	 */
	lines: {
		/** 线的起点或圈的中心点 */
		center: Vector3;
		/** 线运动方向上的点 */
		direction?: Vector3;
	}[];
}
/**
 * Indicates if the scene is viewed in 3D, 2D, or 2.5D Columbus view.
 */
export declare enum SceneMode {
	/**
	 * Morphing between mode, e.g., 3D to 2D.
	 */
	MORPHING = 0,
	/**
	 * Columbus View mode.  A 2.5D perspective view where the map is laid out
	 * flat and objects with non-zero height are drawn above it.
	 */
	COLUMBUS_VIEW = 1,
	/**
	 * 2D mode.  The map is viewed top-down with an orthographic projection.
	 */
	SCENE2D = 2,
	/**
	 * 3D mode.  A traditional 3D perspective view of the globe.
	 */
	SCENE3D = 3
}
/**
 * 表示空间经纬度范围
 */
export interface Bounds {
	west: number;
	south: number;
	east: number;
	north: number;
}
/**
 * 截图参数
 */
export interface ScreenShot {
	/** 裁剪起始点x */
	x: number;
	/** 裁剪起始点y */
	y: number;
	/** 图片宽度 */
	width: number;
	/** 图片高度 */
	height: number;
	/** 图片高宽比例 */
	radio: number;
	/** 图片格式 */
	format: "jpg" | "png" | "jpeg";
	/** 图片保存地址 */
	toPath: string;
	/** 图片名称 */
	fileName: string;
	/** 图片质量 0-1，默认1 */
	quality: number;
}
export interface PrimitiveLayerBase {
	visible: boolean;
	name: string;
}
/** 复合型 */
export interface NonuniformPrimitiveLayer extends PrimitiveLayerBase {
	primitives: (Primitive & {
		/** layer内唯一标识 */
		id: string;
	})[];
}
/** 统一风格型 */
export interface UniformPrimitiveData {
	show: boolean;
	name: string;
	position: Vector3;
	positions: number[] | Vector3[] | Circle | Rectangle | Spline;
	hierarchy: PolygonHierarchy | Circle | Rectangle;
	baseHeight: number;
	topHeight: number;
	text: string;
	stRotation: number;
	orientation: HeadingPitchRoll;
	properties: {
		[_: string]: unknown;
	};
}
export interface PropertyInfo {
	propertyName: string;
	/** const为常量类型所有值为defaultValue */
	valueType: "number" | "boolean" | "string" | "const";
	defualtValue: unknown;
}
export type UniformPrimitiveDataPropertyMap = {
	[P in Exclude<keyof UniformPrimitiveData, "position" | "orientation" | "positions" | "hierarchy" | "properties">]?: string;
} & {
	/** topHeight是否作为相对值处理,默认否 */
	isTopHeightRelative?: boolean;
};
export interface UniformPrimitiveLayer<P extends Primitive> extends PrimitiveLayerBase {
	/** 统一风格 */
	uniform: Omit<P, keyof UniformPrimitiveData>;
	/** 数据 */
	primitives: (Omit<P, Exclude<keyof P, keyof UniformPrimitiveData>> & {
		/** layer内唯一标识 */
		id: string;
	})[];
	/** 属性表,规则primitive.properties仅符合属性表部分可见 */
	propertyInfos?: PropertyInfo[];
	/** data和property关联表 */
	uniformPrimitiveDataPropertyMap?: UniformPrimitiveDataPropertyMap;
}
export type PrimitiveLayer = NonuniformPrimitiveLayer | UniformPrimitiveLayer<PrimitiveSolidPoint> | UniformPrimitiveLayer<PrimitiveBillboard> | UniformPrimitiveLayer<PrimitiveLabel> | UniformPrimitiveLayer<PrimitiveTerrainLabel> | UniformPrimitiveLayer<PrimitiveModel> | UniformPrimitiveLayer<PrimitiveSolidLine> | UniformPrimitiveLayer<PrimitiveDashedLine> | UniformPrimitiveLayer<PrimitiveContourLine> | UniformPrimitiveLayer<PrimitiveArrowLine> | UniformPrimitiveLayer<PrimitiveHaloLine> | UniformPrimitiveLayer<PrimitiveWallLine> | UniformPrimitiveLayer<PrimitiveSolidRegion> | UniformPrimitiveLayer<PrimitiveGridRegion> | UniformPrimitiveLayer<PrimitiveStripeRegion> | UniformPrimitiveLayer<PrimitiveImageRegion> | UniformPrimitiveLayer<PrimitiveWaterRegion> | UniformPrimitiveLayer<PrimitiveColumnModel>;
export declare enum PrimitiveType {
	/** 纯色点 */
	SolidPoint = 0,
	/** 图片 */
	Billboard = 1,
	/** 文字 */
	Label = 2,
	/** 贴地文字 */
	TerrainLabel = 3,
	/** 模型 */
	Model = 4,
	/** 纯色线 */
	SolidLine = 10,
	/** 虚线 */
	DashedLine = 11,
	/** 轮廓线 */
	ContourLine = 12,
	/** 箭头线 */
	ArrowLine = 13,
	/** 光晕线 */
	HaloLine = 14,
	/** 图片填充线 */
	ImageLine = 19,
	/**  墙线 */
	WallLine = 17,
	/** 纯色面 */
	SolidRegion = 20,
	/** 网格面 */
	GridRegion = 21,
	/** 条纹面 */
	StripeRegion = 22,
	/** 图片填充面 */
	ImageRegion = 23,
	/** 描边面 */
	ContourRegion = 24,
	/** 水面 */
	WaterRegion = 25,
	/** 羽化面 */
	FeatherRegion = 26,
	/** 白模柱状体 */
	ColumnModel = 32
}
export interface PrimitiveBase {
	/** 类型 */
	type: PrimitiveType;
	/** 是否显示，默认true */
	show?: boolean;
	/** 可见范围 */
	distanceDisplayCondition?: DistanceDisplayCondition;
	/** layer内唯一标识 */
	/** primitive 名称 */
	name?: string;
	/** 属性字段 */
	properties?: {
		[_: string]: unknown;
	};
}
export type Primitive = PrimitiveSolidPoint | PrimitiveBillboard | PrimitiveLabel | PrimitiveTerrainLabel | PrimitiveModel | PrimitiveSolidLine | PrimitiveDashedLine | PrimitiveContourLine | PrimitiveArrowLine | PrimitiveHaloLine | PrimitiveWallLine | PrimitiveSolidRegion | PrimitiveGridRegion | PrimitiveStripeRegion | PrimitiveImageRegion | PrimitiveWaterRegion | PrimitiveFeatherRegion | PrimitiveColumnModel;
export interface PrimitiveSolidPoint extends PrimitiveBase {
	type: PrimitiveType.SolidPoint;
	/** 位置 */
	position: Vector3;
	/** 大小pixelSize */
	size?: number;
	/** 填充颜色 */
	color?: string;
	/** 轮廓颜色，默认黑色 */
	outlineColor?: string;
	/** 轮廓宽度，默认0 */
	outlineWidth?: number;
	/** 遮挡深度 */
	disableDepthTestDistance?: number;
	/** 随距离缩放参数，默认undefine表示不随距离缩放 */
	scaleByDistance?: NearFarScalar;
	/** 相对地形的位置 */
	heightReference?: HeightReference;
}
export interface PrimitiveBillboard extends PrimitiveBase {
	type: PrimitiveType.Billboard;
	/** 位置 */
	position: Vector3;
	/** 图片路径 */
	image: string;
	/** 水平对齐方式 , 默认center*/
	horizontalOrigin?: HorizontalOrigin;
	/** 竖直对齐方式 , 默认center*/
	verticalOrigin?: VerticalOrigin;
	/** 遮挡深度 */
	disableDepthTestDistance?: number;
	/** 随距离缩放参数，默认undefine表示不随距离缩放 */
	scaleByDistance?: NearFarScalar;
	/** 图片高，单位px */
	height?: number;
	/** 图片宽，单位px */
	width?: number;
	/** 局部坐标系偏移量，单位米 */
	eyeOffset?: Vector3;
	/** 屏幕偏移量，单位px */
	pixelOffset?: Vector2;
	/** 相对地形的位置 */
	heightReference?: HeightReference;
}
export interface PrimitiveLabel extends PrimitiveBase {
	type: PrimitiveType.Label;
	/** 位置 */
	position: Vector3;
	/** 文本内容 */
	text: string;
	/** 水平对齐方式 , 默认center*/
	horizontalOrigin?: HorizontalOrigin;
	/** 竖直对齐方式 , 默认center*/
	verticalOrigin?: VerticalOrigin;
	/** 字体样式，默认字体'10px sans-serif'*/
	font?: string;
	/** 默认FILL */
	style?: LabelStyle;
	/** 文字填充色 */
	fillColor?: string;
	/** 文字填轮廓色 */
	outlineColor?: string;
	/** 描边宽度 ，默认1.0*/
	outlineWidth?: number;
	/** 背景显示否，默认false */
	showBackground?: boolean;
	/** 背景色，不设置表示没有背景 */
	backgroundColor?: string;
	/** 背景边框宽度 , 默认0*/
	backgroundPaddingSize?: number;
	/** 文字遮挡深度 */
	disableDepthTestDistance?: number;
	/** 随距离缩放参数，默认undefine表示不随距离缩放 */
	scaleByDistance?: NearFarScalar;
	/** 缩放比例，默认1.0 */
	scale?: number;
	/** 局部坐标系偏移量，单位米 */
	eyeOffset?: Vector3;
	/** 屏幕偏移量，单位px */
	pixelOffset?: Vector2;
	/** 相对地形的位置 */
	heightReference?: HeightReference;
}
export interface PrimitiveTerrainLabel extends PrimitiveBase {
	type: PrimitiveType.TerrainLabel;
	/** 位置 */
	position: Vector3;
	/** 文本内容 */
	text: string;
	/** 文本走向 */
	stRotation?: number;
	/** 字体样式，默认字体'10px sans-serif'*/
	font?: string;
	/** 默认FILL */
	style?: LabelStyle;
	/** 文字填充色 */
	fillColor?: string;
	/** 文字填轮廓色 */
	outlineColor?: string;
	/** 背景显示否，默认false */
	showBackground?: boolean;
	/** 背景色，不设置表示没有背景 */
	backgroundColor?: string;
	/** 背景边框宽度 , 默认0*/
	backgroundPaddingSize?: number;
	/** 缩放比例，默认1.0 */
	scale?: number;
}
export interface PrimitiveModel extends PrimitiveBase {
	type: PrimitiveType.Model;
	/** 位置 */
	position: Vector3;
	/** 模型姿态 */
	orientation?: HeadingPitchRoll;
	/** gltf uri */
	uri: string;
	/** 缩放 */
	scale?: number;
	/** 最小可见像素大小 */
	minimumPixelSize?: number;
	/** 相对地形的位置 */
	heightReference?: HeightReference;
	/** 是否播放骨骼动画 */
	runAnimations?: boolean;
	/** 模型轮廓 */
	silhouetteSize?: number;
	silhouetteColor?: string;
}
export interface PrimitiveSolidLine extends PrimitiveBase {
	type: PrimitiveType.SolidLine;
	/** 节点位置 */
	positions: number[] | Vector3[] | Circle | Rectangle | Spline;
	/** 线宽度 */
	width?: number;
	/** 填充颜色 */
	color?: string;
	/** 是否被地形遮挡 默认false被遮挡*/
	depthFailShow?: boolean;
	classificationType?: ClassificationType;
}
export interface PrimitiveDashedLine extends PrimitiveBase {
	type: PrimitiveType.DashedLine;
	/** 节点位置 */
	positions: number[] | Vector3[] | Circle | Rectangle | Spline;
	/** 线宽度 */
	width?: number;
	/** 填充颜色 */
	color?: string;
	/** 背景色 */
	gapColor?: string;
	/** 间隔 */
	dashLength?: number;
	/** 是否被地形遮挡 默认false被遮挡*/
	depthFailShow?: boolean;
	classificationType?: ClassificationType;
}
export interface PrimitiveContourLine extends PrimitiveBase {
	type: PrimitiveType.ContourLine;
	/** 节点位置 */
	positions: number[] | Vector3[] | Circle | Rectangle | Spline;
	/** 线宽度 */
	width?: number;
	/** 填充颜色 */
	color?: string;
	/** 轮廓宽outlineOuterWidth */
	outlineWidth?: number;
	/** 轮廓颜色outlineOuterColor */
	outlineColor?: string;
	/** 是否被地形遮挡 默认false被遮挡*/
	depthFailShow?: boolean;
	classificationType?: ClassificationType;
}
export interface PrimitiveArrowLine extends PrimitiveBase {
	type: PrimitiveType.ArrowLine;
	/** 节点位置 */
	positions: number[] | Vector3[] | Circle | Rectangle | Spline;
	/** 线宽度 */
	width?: number;
	/** 填充颜色 */
	color?: string;
	/** 是否被地形遮挡 默认false被遮挡*/
	depthFailShow?: boolean;
	classificationType?: ClassificationType;
}
export interface PrimitiveHaloLine extends PrimitiveBase {
	type: PrimitiveType.HaloLine;
	/** 节点位置 */
	positions: number[] | Vector3[] | Circle | Rectangle | Spline;
	/** 线宽度 */
	width?: number;
	/** 填充颜色 */
	color?: string;
	/** 光晕强度glowLinePower */
	glowPower?: number;
	/** 是否被地形遮挡 默认false被遮挡*/
	depthFailShow?: boolean;
	classificationType?: ClassificationType;
}
export interface PrimitiveWallLine extends PrimitiveBase {
	type: PrimitiveType.WallLine;
	/** 节点位置(墙顶的顶点数组) */
	positions: number[] | Vector3[] | Circle | Rectangle | Spline;
	/** 填充颜色 */
	color?: string;
	/** 底面高度 */
	baseHeight?: number;
	/** 顶面高度 */
	topHeight?: number;
}
export interface PrimitiveSolidRegion extends PrimitiveBase {
	type: PrimitiveType.SolidRegion;
	/** 面节点 */
	hierarchy: PolygonHierarchy | Circle | Rectangle;
	/** 填充颜色 */
	color?: string;
	classificationType?: ClassificationType;
	/** deprecated 废弃的贴地接口 当classificationType未定义时生效 */
	clampToGround?: boolean;
	/** 水面高度,贴地时无效 */
	topHeight?: number;
	/** 底部高度，贴地时无效 */
	baseHeight?: number;
	/** 贴图旋转角度 */
	stRotation?: number;
}
export interface PrimitiveGridRegion extends PrimitiveBase {
	type: PrimitiveType.GridRegion;
	/** 面节点 */
	hierarchy: PolygonHierarchy | Circle | Rectangle;
	/** 填充颜色 defualt white */
	color?: string;
	/** polygonSymbolGridCellAlpha, 0～1.0,defualt 0.1 */
	cellAlpha?: number;
	/** polygonSymbolGridLineCount,defualt 8 */
	lineCount?: number;
	/** polygonSymbolGridLineThickness,defualt 1.0 */
	lineThickness?: number;
	/** polygonSymbolGridLineOffset,0 */
	lineOffset?: number;
	classificationType?: ClassificationType;
	/** deprecated 废弃的贴地接口 当classificationType未定义时生效 */
	clampToGround?: boolean;
	/** 水面高度,贴地时无效 */
	topHeight?: number;
	/** 底部高度，贴地时无效 */
	baseHeight?: number;
	/** 贴图旋转角度 */
	stRotation?: number;
}
export interface PrimitiveStripeRegion extends PrimitiveBase {
	type: PrimitiveType.StripeRegion;
	/** 面节点 */
	hierarchy: PolygonHierarchy | Circle | Rectangle;
	/** 偶数条带颜色polygonSymbolStripeEvenColor,默认白色 */
	evenColor?: string;
	/** 奇数条带颜色polygonSymbolStripeOddColor,默认黑色 */
	oddColor?: string;
	/** polygonSymbolStripeRepeat,默认值1 */
	repeat?: number;
	/** polygonSymbolStripeOffset,默认值0 */
	offset?: number;
	/** true（默认值）:SuperMap3D.StripeOrientation.HORIZONTAL/false:SuperMap3D.StripeOrientation.VERTICAL */
	orientationHorizontal?: boolean;
	classificationType?: ClassificationType;
	/** deprecated 废弃的贴地接口 当classificationType未定义时生效 */
	clampToGround?: boolean;
	/** 水面高度,贴地时无效 */
	topHeight?: number;
	/** 底部高度，贴地时无效 */
	baseHeight?: number;
	/** 贴图旋转角度 */
	stRotation?: number;
}
export interface PrimitiveImageRegion extends PrimitiveBase {
	type: PrimitiveType.ImageRegion;
	/** 面节点 */
	hierarchy: PolygonHierarchy | Circle | Rectangle;
	/** 填充图片url */
	image?: string;
	/** X/Y方向重复填充次数，默认（1，1） */
	repeat?: Vector2;
	classificationType?: ClassificationType;
	/** deprecated 废弃的贴地接口 当classificationType未定义时生效 */
	clampToGround?: boolean;
	/** 水面高度,贴地时无效 */
	topHeight?: number;
	/** 底部高度，贴地时无效 */
	baseHeight?: number;
	/** 贴图旋转角度 */
	stRotation?: number;
}
export interface PrimitiveWaterRegion extends PrimitiveBase {
	type: PrimitiveType.WaterRegion;
	/** 面节点 */
	hierarchy: PolygonHierarchy | Circle | Rectangle;
	classificationType?: ClassificationType;
	/** deprecated 废弃的贴地接口 当classificationType未定义时生效 */
	clampToGround?: boolean;
	/** 水面高度,贴地时无效 */
	topHeight?: number;
	/** 底部高度，贴地时无效 */
	baseHeight?: number;
	/** 贴图旋转角度 */
	stRotation?: number;
	/** baseWaterColor: rgba color object base color of the water. */
	baseWaterColor?: string;
	/** blendColor: rgba color object used when blending from water to non-water areas. */
	blendColor?: string;
	/** specularMap: Single channel texture used to indicate areas of water. */
	specularMap?: string;
	/** frequency: Number that controls the number of waves.500 */
	frequency?: number;
	/** normalMap: Normal map for water normal perturbation.扰动 */
	normalMap?: string;
	/** animationSpeed: Number that controls the animations speed of the water.0.01 */
	animationSpeed?: number;
	/** amplitude: Number that controls the amplitude of water waves.振幅5 */
	amplitude?: number;
	/** specularIntensity: Number that controls the intensity of specular reflections. */
	specularIntensity?: number;
}
export interface PrimitiveFeatherRegion extends PrimitiveBase {
	type: PrimitiveType.FeatherRegion;
	/** 面节点 */
	hierarchy: PolygonHierarchy | Circle | Rectangle;
	/** 面底色 */
	color?: string;
	/** 羽化边缘透明度 区值0～1，默认值0.2 */
	edgeAlpha?: number;
	classificationType?: ClassificationType;
	/** deprecated 废弃的贴地接口 当classificationType未定义时生效 */
	clampToGround?: boolean;
	/** 水面高度,贴地时无效 */
	topHeight?: number;
	/** 底部高度，贴地时无效 */
	baseHeight?: number;
	/** 贴图旋转角度 */
	stRotation?: number;
}
export interface PrimitiveColumnModel extends PrimitiveBase {
	type: PrimitiveType.ColumnModel;
	/** 底面节点 */
	hierarchy: PolygonHierarchy | Circle | Rectangle;
	/** 填充颜色 */
	color?: string;
	/** 底面高度 */
	baseHeight?: number;
	/** 顶面高度 */
	topHeight?: number;
	/** 顶面贴图 */
	topImage?: string;
	/** 侧面贴图 */
	sideImage?: string;
	/** 侧面重复 */
	sideRepeate?: number;
	/** 轮廓线宽 */
	/** 轮廓线颜色 */
	outlineColor?: string;
}
export type AsyncFunction<Functions extends Record<string, (...args: any) => any>> = {
	[K in keyof Functions]: ReturnType<Functions[K]> extends Promise<unknown> ? (...params: Parameters<Functions[K]>) => ReturnType<Functions[K]> : (...params: Parameters<Functions[K]>) => Promise<ReturnType<Functions[K]>>;
};
export type IAnalysis = {
	/**
	 * 根据起点终点生成一条贴地形的线
	 * @param start 起点经纬度坐标
	 * @param end 终点经纬度坐标
	 * @param tolerance 精度容限，单位 米。默认1米。容限越低，生成的线的精度越高，但相应的生成时间会越长
	 * @returns 线的点串。当没有地形或地形获取失败时，可能为空数组
	 */
	pickTerrainLine: (start: Vector2, end: Vector2, tolerance?: number, classificationType?: ClassificationType) => Promise<Vector3[]>;
	/**
	 * 获取指定经纬度点在地形上的点坐标
	 * @param point 经纬度坐标
	 * @returns 带地形高度的经纬度坐标。获取失败时返回 undefined
	 */
	pickTerrainPoint: (point: Vector2) => Promise<Vector3 | undefined>;
	/**
	 * 获取指定经纬度点间距离
	 * @param point 带地形高度的经纬度坐标
	 * @returns 总距离
	 */
	distanceOfPoints: (points: [
		Vector3,
		Vector3,
		...Vector3[]
	]) => Promise<number>;
};
export type IAnimation = {
	/**
	 * 加载动画
	 * @param animation 动画参数
	 * @param id 用来识别此动画的id
	 */
	load: (animation: AnimationParam, id?: string) => void;
	/**
	 * 加载音频动画 {@link AnimationParam.audio} 对应的音频数据或路径
	 * @param data
	 * @returns
	 */
	loadAudios: (data: string[] | string) => void;
	/**
	 * 获取音频字幕
	 * @returns 音频字幕。每一句话一个对象。
	 */
	getAudioSubtitle: () => AudioSubtitle[];
	/**
	 * 清除当前动画
	 */
	clear: () => void;
	/** 获取当前加载的动画 */
	getCurrentAnimation: () => AnimationParam | null;
	/**
	 * 播放动画
	 * @param time 指定开始时间，默认从0s开始。仅开始有效
	 */
	play: (time?: number) => void;
	/**
	 * 暂停动画
	 */
	pause: () => void;
	/**
	 * 停止动画
	 */
	stop: () => void;
	/**
	 * 获取动画时长
	 * @returns 动画时长，单位秒
	 */
	getDuration: () => number;
	/**
	 * 获取当前播放进度时间
	 * @returns 当前进度时间，单位秒
	 */
	getCurrentTime: () => number;
	/**
	 * 设置播放速率
	 * @param rate 播放速率，大于1加速，小于1减速
	 */
	setPlayRate: (rate: number) => void;
	/**
	 * 获取播放速率
	 * @returns 播放速率，大于1加速，小于1减速
	 */
	getPlayRate: () => number;
	/**
	 * 定位到具体时间
	 * @param time 要定位到的时间，单位秒
	 */
	zoomToTime: (time: number) => void;
	/**
	 * 获取相机飞行经过的所有站点
	 * @returns 相机飞行经过的所有站点，没有飞行动画返回空数组
	 */
	getFlyStops: () => FlyStop[];
	/**
	 * 设置音量
	 * @param value 范围0～1
	 * @returns
	 */
	setAudioVolume: (value: number) => void;
	/**
	 * 获取音量
	 * @returns 当前音量
	 */
	getAudioVolume: () => number;
};
/**
 * 场景
 */
export type ICamera = {
	/**
	 * 全幅显示球
	 * bySecends 当前相机到全幅相机过场动画时间（单位秒，默认值1）
	 * @returns 成功/失败
	 */
	viewEntire: (bySecends?: number) => Promise<boolean>;
	/**
	 * 飞行到当前位置的上空，使地球全幅
	 * @param duration 飞行时间，单位秒。 如果不指定，将自动计算一个最合适的飞行时间
	 * @returns 是否成功
	 */
	viewEntireCurrent: (duration?: number) => Promise<boolean>;
	/**
	 * 相机拉近（沿相机朝向）
	 * byDistance 拉近距离（单位米，正表示拉近，负表示拉远）
	 * byLookDirection 是否沿着视野方向（默认否）
	 * bySecends 相机移动过场动画时间（单位秒，默认值1）
	 * @returns 成功/失败
	 */
	flyForward: (byDistance: number, byLookDirection?: boolean, bySecends?: number) => Promise<boolean>;
	/**
	 * 相机平移（沿相机右侧）
	 * byDistance 平移距离（单位米，正表示右，负表示左）
	 * bySecends 相机移动过场动画时间（单位秒，默认值1）
	 * @returns 成功/失败
	 */
	flyRight: (byDistance: number, bySecends?: number) => Promise<boolean>;
	/**
	 * 相机平移（沿相机上方）
	 * byDistance 平移距离（单位米，正表示上，负表示下）
	 * bySecends 相机移动过场动画时间（单位秒，默认值1）
	 * @returns 成功/失败
	 */
	flyUp: (byDistance: number, bySecends?: number) => Promise<boolean>;
	/**
	 * 相机移动
	 * Camera移动到的目标相机
	 * bySecends 相机移动过场动画时间（单位秒，默认值1）
	 * @returns 成功/失败
	 */
	flyTo: (camera: Camera, bySecends?: number) => Promise<boolean>;
	/**
	 * 相机弧度
	 * Camera弧度
	 * @returns 成功/失败
	 */
	setCameraRadian: (camera: {
		heading: number;
		pitch: number;
	}) => Promise<boolean>;
	/**
	 * 罗盘指北
	 * @returns 成功/失败
	 */
	compassPointingNorth: () => Promise<boolean>;
	/**
	 * 罗盘指向（视野焦点不变，若无焦点转向失败）
	 * angle与北夹角角度
	 * @returns 成功/失败
	 */
	headingAt: (angle: number) => Promise<boolean>;
	/**
	 * 相机朝向
	 * angle与北夹角角度
	 * bySecond转向时间
	 * @returns 成功/失败
	 */
	heading: (angle: number, bySecends?: number) => Promise<boolean>;
	/**
	 * 俯仰角（视野焦点不变，若无焦点转向失败）
	 * angle角度，0为平视，-90为top-down视角
	 * @returns 成功/失败
	 */
	pitchAt: (angle: number) => Promise<boolean>;
	/**
	 * 相机俯仰
	 * angle角度，0为平视，-90为top-down视角
	 * bySecond转向时间
	 * @returns 成功/失败
	 */
	pitch: (angle: number, bySecends?: number) => Promise<boolean>;
	/**
	 * 放大/缩小（按倍数拉近/拉远相机）
	 * byRatio 放大倍数（正表示放大，负表示缩小）
	 * bySecends 相机移动过场动画时间（单位秒，默认值1）
	 * @returns 成功/失败
	 */
	zoom: (byRatio: number, bySecends?: number) => Promise<boolean>;
	/**
	 * 获取相机位置参数
	 * @returns 相机位置参数
	 */
	getCameraParam: () => Camera | null;
	/**
	 * 获取相机相对位置参数
	 * @returns 相对位置坐标
	 */
	getRelativePosition: (param: {
		forward?: number;
		up?: number;
		right?: number;
	}) => Vector3 | null;
	/**
	 * 相对相机在球面移动
	 * @param position移动点坐标
	 * @param right/forward 单位米
	 * @returns 位置坐标
	 */
	translateRelativeCamera: (position: Vector3, right: number, forward: number) => Vector3 | null;
	/**
	 * 获取世界点在相机坐标系下的坐标
	 * @param position 经纬度
	 * @returns 相机坐标系下的坐标
	 */
	getPositionInCameraSpace: (position: Vector3) => Vector3;
	/**
	 * 开启或关闭相机旋转
	 *
	 * 在 2D 或 3D 模式下有效
	 * @param enable `true`开启，`false`关闭
	 */
	enableRotate: (enable: boolean) => Promise<void>;
	/**
	 * 开启或关闭相机俯仰
	 *
	 * 在 3D 或 Columbus(2.5D) 模式下有效
	 * @param enable `true`开启，`false`关闭
	 */
	enableTilt: (enable: boolean) => Promise<void>;
	/**
	 * 开启或关闭相机移动
	 *
	 * 在 2D 或 Columbus(2.5D) 模式下有效
	 * @param enable `true`开启，`false`关闭
	 */
	enableTranslate: (enable: boolean) => Promise<void>;
	/**
	 * 开启或关闭相机缩放
	 *
	 * @param enable `true`开启，`false`关闭
	 */
	enableZoom: (enable: boolean) => Promise<void>;
	/**
	 * 是否开启相机旋转
	 * @returns 是否开启相机旋转
	 */
	isEnableRotate: () => boolean;
	/**
	 * 是否开启相机俯仰
	 * @returns 是否开启相机俯仰
	 */
	isEnableTilt: () => boolean;
	/**
	 * 是否开启相机移动
	 * @returns 是否开启相机移动
	 */
	isEnableTranslate: () => boolean;
	/**
	 * 是否开启相机缩放
	 * @returns 是否开启相机缩放
	 */
	isEnableZoom: () => boolean;
	/**
	 * 获取当前视角下地球可视的经纬度范围
	 * 若地球不可见，则返回 undefined
	 */
	getViewBounds: () => Bounds | undefined;
};
export type TCoordSys = "wgs84" | "gcj02" | "bd09";
export type ICoordTrans = {
	translate(points: number[][], from: TCoordSys, to: TCoordSys): number[][];
};
/**
 * GeometryTypes
 *
 * https://tools.ietf.org/html/rfc7946#section-1.4
 * The valid values for the "type" property of GeoJSON geometry objects.
 */
export declare type GeometryTypes = "Point" | "LineString" | "Polygon" | "MultiPoint" | "MultiLineString" | "MultiPolygon" | "GeometryCollection";
/**
 * Bounding box
 *
 * https://tools.ietf.org/html/rfc7946#section-5
 * A GeoJSON object MAY have a member named "bbox" to include information on the coordinate range for its Geometries, Features, or FeatureCollections.
 * The value of the bbox member MUST be an array of length 2*n where n is the number of dimensions represented in the contained geometries,
 * with all axes of the most southwesterly point followed by all axes of the more northeasterly point.
 * The axes order of a bbox follows the axes order of geometries.
 */
export declare type BBox2d = [
	number,
	number,
	number,
	number
];
export declare type BBox3d = [
	number,
	number,
	number,
	number,
	number,
	number
];
export declare type BBox = BBox2d | BBox3d;
/**
 * Id
 *
 * https://tools.ietf.org/html/rfc7946#section-3.2
 * If a Feature has a commonly used identifier, that identifier SHOULD be included as a member of
 * the Feature object with the name "id", and the value of this member is either a JSON string or number.
 */
export declare type Id = string | number;
/**
 * Position
 *
 * https://tools.ietf.org/html/rfc7946#section-3.1.1
 * Array should contain between two and three elements.
 * The previous GeoJSON specification allowed more elements (e.g., which could be used to represent M values),
 * but the current specification only allows X, Y, and (optionally) Z to be defined.
 */
export declare type Position = number[];
/**
 * Properties
 *
 * https://tools.ietf.org/html/rfc7946#section-3.2
 * A Feature object has a member with the name "properties".
 * The value of the properties member is an object (any JSON object or a JSON null value).
 */
export declare type Properties = {
	[name: string]: any;
} | null;
/**
 * GeoJSON Object
 *
 * https://tools.ietf.org/html/rfc7946#section-3
 * The GeoJSON specification also allows [foreign members](https://tools.ietf.org/html/rfc7946#section-6.1)
 * Developers should use "&" type in TypeScript or extend the interface to add these foreign members.
 */
export interface GeoJSONObject {
	/**
	 * Specifies the type of GeoJSON object.
	 */
	type: string;
	/**
	 * Bounding box of the coordinate range of the object's Geometries, Features, or Feature Collections.
	 * https://tools.ietf.org/html/rfc7946#section-5
	 */
	bbox?: BBox;
}
/**
 * Geometry Object
 *
 * https://tools.ietf.org/html/rfc7946#section-3
 */
export interface GeometryObject extends GeoJSONObject {
	type: GeometryTypes;
}
/**
 * Geometry
 *
 * https://tools.ietf.org/html/rfc7946#section-3
 */
export interface Geometry extends GeoJSONObject {
	coordinates: Position | Position[] | Position[][] | Position[][][];
}
/**
 * Point Geometry Object
 *
 * https://tools.ietf.org/html/rfc7946#section-3.1.2
 */
export interface Point extends GeometryObject {
	type: "Point";
	coordinates: Position;
}
/**
 * MultiPoint Geometry Object
 *
 * https://tools.ietf.org/html/rfc7946#section-3.1.3
 */
export interface MultiPoint extends GeometryObject {
	type: "MultiPoint";
	coordinates: Position[];
}
/**
 * LineString Geometry Object
 *
 * https://tools.ietf.org/html/rfc7946#section-3.1.4
 */
export interface LineString extends GeometryObject {
	type: "LineString";
	coordinates: Position[];
}
/**
 * MultiLineString Geometry Object
 *
 * https://tools.ietf.org/html/rfc7946#section-3.1.5
 */
export interface MultiLineString extends GeometryObject {
	type: "MultiLineString";
	coordinates: Position[][];
}
/**
 * Polygon Geometry Object
 *
 * https://tools.ietf.org/html/rfc7946#section-3.1.6
 */
export interface Polygon extends GeometryObject {
	type: "Polygon";
	coordinates: Position[][];
}
/**
 * MultiPolygon Geometry Object
 *
 * https://tools.ietf.org/html/rfc7946#section-3.1.7
 */
export interface MultiPolygon extends GeometryObject {
	type: "MultiPolygon";
	coordinates: Position[][][];
}
/**
 * GeometryCollection
 *
 * https://tools.ietf.org/html/rfc7946#section-3.1.8
 *
 * A GeoJSON object with type "GeometryCollection" is a Geometry object.
 * A GeometryCollection has a member with the name "geometries".
 * The value of "geometries" is an array.  Each element of this array is a GeoJSON Geometry object.
 * It is possible for this array to be empty.
 */
export interface GeometryCollection extends GeometryObject {
	type: "GeometryCollection";
	geometries: Array<Point | LineString | Polygon | MultiPoint | MultiLineString | MultiPolygon>;
}
/**
 * Feature
 *
 * https://tools.ietf.org/html/rfc7946#section-3.2
 * A Feature object represents a spatially bounded thing.
 * Every Feature object is a GeoJSON object no matter where it occurs in a GeoJSON text.
 */
export interface Feature<G = Geometry | GeometryCollection, P = Properties> extends GeoJSONObject {
	type: "Feature";
	geometry: G;
	/**
	 * A value that uniquely identifies this feature in a
	 * https://tools.ietf.org/html/rfc7946#section-3.2.
	 */
	id?: Id;
	/**
	 * Properties associated with this feature.
	 */
	properties: P;
}
/**
 * Feature Collection
 *
 * https://tools.ietf.org/html/rfc7946#section-3.3
 * A GeoJSON object with the type "FeatureCollection" is a FeatureCollection object.
 * A FeatureCollection object has a member with the name "features".
 * The value of "features" is a JSON array. Each element of the array is a Feature object as defined above.
 * It is possible for this array to be empty.
 */
export interface FeatureCollection<G = Geometry | GeometryCollection, P = Properties> extends GeoJSONObject {
	type: "FeatureCollection";
	features: Array<Feature<G, P>>;
}
export interface ILabelStyle {
	type: "normal" | "outline" | "background" | "backgroundAndOutline";
	label: string;
	color: string;
	size: number;
	scale: number;
	angle: number;
	isFixSize: boolean;
	backgroundColor: string;
	outlineColor: string;
	alwaysVisible: boolean;
	visibleDistance: number;
	depthDistance: number;
	isTerrain: boolean;
}
export interface ILineStyle {
	type: "solid" | "dash" | "outline" | "arrow" | "glow" | "breath" | "tail" | "wall";
	clampGroundType: "none" | "ground" | "s3m" | "both";
	color: string;
	width: number;
	dashColor: string;
	outlineColor: string;
	dashGap: number;
	outlieWidth: number;
	glowFactor: number;
	breathFrenquency: number;
	tailDuration: number;
	alwaysVisible: boolean;
	visibleDistance: number;
	keepFront: boolean;
	wallHeight: number;
}
export type PointStyleType = "point" | "image" | "model" | "glow" | "breath";
export interface IPointStyle {
	type: PointStyleType;
	isClampToGroud: boolean;
	imageContent: `${string}ratio:${number}`;
	modelContent: string;
	color: string;
	size: number;
	imageSize: number;
	modelSize: number;
	orientation: number;
	pitch: number;
	roll: number;
	isFixSize: boolean;
	glowColor: string;
	glowFactor: number;
	breathFrenquency: number;
	showLabel: boolean;
	label: string;
	labelType: "normal" | "outline" | "background" | "backgroundAndOutline";
	labelSize: number;
	labelColor: string;
	labelBackgroundColor: string;
	labelOutlineColor: string;
	offsetVertical: number;
	offsetHorizontal: number;
	isLabelFix: boolean;
	alwaysVisible: boolean;
	visibleDistance: number;
	depthDistance: number;
}
export interface IRegionStyle {
	type: "solid" | "grid" | "stripe" | "glow" | "breath" | "image";
	clampGroundType: "none" | "ground" | "s3m" | "both";
	color: string;
	gridbackgroundOpacity: number;
	gridWidth: number;
	stripeType: 1 | 2;
	stripeRepete: number;
	stripeOddColor: string;
	imageContent: string;
	imageRepeatX: number;
	imageRepeatY: number;
	textureRotation: number;
	glowFactor: number;
	breathFrenquency: number;
	alwaysVisible: boolean;
	visibleDistance: number;
	relativeHeight: number;
}
declare enum SceneAction {
	/** NONE */
	NONE = 0,
	/** 选择 */
	SELECT = 1,
	/** 手势监听 */
	TOUCH = 2,
	/** 球面平移 */
	TRANSLATION = 3,
	/** 放大镜 */
	MAGNIFIER = 4
}
/**
 * 场景
 */
export type IScene = {
	/**
	 * 打开互动地图
	 * @param map 互动地图
	 * @param autoPlay 当有动画时，是否自动播放。默认不自动播放
	 * @param s3mInOrder s3m顺序打开，默认false
	 * @returns 当前打开的互动地图
	 */
	open: (map: IMap3D, autoPlay?: boolean, s3mInOrder?: boolean) => Promise<boolean>;
	/**
	 * 关闭当前互动地图
	 * @param duration 关闭地图时的动画时间，单位秒。如果不指定，将自动计算一个最合适的时间
	 * @returns 当前打开的互动地图
	 */
	close: (duration?: number) => Promise<boolean>;
	/**
	 * 获取当前互动地图
	 * @returns 当前打开的互动地图
	 */
	getMap: () => Promise<IMap3D>;
	/**
	 * 打开 iserver 发布的场景
	 * @param url 场景地址 eg: http://www.supermapol.com/realspace/services/3D-CQBaiMoMeiHua-2/rest/realspace
	 * @param sceneName 要打开的场景名，默认打开第一个
	 * @returns 是否成功
	 */
	openIServerScene: (url: string, sceneName?: string) => boolean;
	/**
	 * 打开地形图层
	 * @param name 要添加的图层名
	 * @param provider 地形图层provider
	 * @returns 是否成功
	 */
	openTerrainLayer: (name: string, provider: TerrainProvider) => boolean;
	/**
	 * 关闭当前的地形图层
	 * @returns 是否成功
	 */
	closeTerrainLayer: () => boolean;
	/**
	 * 获取当前的地形图层，没有返回 undefined
	 * @returns 当前的地形图层
	 */
	getTerrainLayer: () => TerrainLayer | undefined;
	/**
	 * 设置地形图层可见
	 * @param visible 是否可见
	 * @returns 是否成功
	 */
	setTerrainLayerVisible: (visible: boolean) => boolean;
	/**
	 * 添加影像图层
	 * @param name 要添加的图层名
	 * @param provider 影像图层provider
	 * @returns 是否成功
	 */
	addImagelayer: (name: string, provider: ImageProvider) => boolean;
	/**
	 * 获取所有影像图层
	 * @returns 地图中所有影像图层
	 */
	getImageLayers: () => ImageLayer[];
	/**
	 * 获取所有影像图层
	 * @returns 地图中所有影像图层
	 */
	getImageLayerByIndex: (index: number) => ImageLayer | undefined;
	/**
	 * 移除影像图层
	 * @param index 影像图层在影像图层集合中的序号
	 * @returns 是否成功
	 */
	removeImageLayer: (index: number) => boolean;
	/**
	 * 设置影像图层可见
	 * @param index 影像图层在影像图层集合中的序号
	 * @param visible 是否可见
	 * @returns 是否成功
	 */
	setImageLayerVisible: (index: number, visible: boolean) => boolean;
	/**
	 * 设置影像图层透明度
	 * @param index 影像图层在影像图层集合中的序号
	 * @param alpha 透明度 0:完全透明,1:不透明
	 * @returns 是否成功
	 */
	setImageLayerAlpha: (index: number, alpha: number) => boolean;
	/**
	 * 在影像图层集合中上移影像图层
	 * @param index 影像图层在影像图层集合中的序号
	 * @returns 是否成功
	 */
	raiseImageLayer: (index: number) => boolean;
	/**
	 * 在影像图层集合中上移影像图层到最顶层
	 * @param index 影像图层在影像图层集合中的序号
	 * @returns 是否成功
	 */
	raiseImageLayerToTop: (index: number) => boolean;
	/**
	 * 在影像图层集合中下移影像图层
	 * @param index 影像图层在影像图层集合中的序号
	 * @returns 是否成功
	 */
	lowerImageLayer: (index: number) => boolean;
	/**
	 * 在影像图层集合中下移影像图层到最底层
	 * @param index 影像图层在影像图层集合中的序号
	 * @returns 是否成功
	 */
	lowerImageLayerToBottom: (index: number) => boolean;
	/**
	 * 添加矢量图层
	 * @param name 要添加的图层名
	 * @param datasouece 矢量图层数据源,undefined表示添加空图层
	 * @param isMediaLayer 是否多媒体图层
	 * @returns 是否成功
	 */
	addEntitiesLayer: (name: string, datasouece?: EntitiesDatasource | EntityCollection) => Promise<boolean>;
	/**
	 * 添加多媒体矢量图层
	 * @param name 要添加的图层名
	 * @returns 是否成功
	 */
	addMediaEntitiesLayer: (name: string) => Promise<boolean>;
	/**
	 * 获取所有矢量图层
	 * @param datasourceNeeded 是否需要图层数据源 ，默认false
	 * @returns 地图中所有影像图层
	 */
	getEntitiesLayers: (datasourceNeeded?: boolean) => Promise<EntitiesLayer[]>;
	/**
	 * 移除矢量图层
	 * @param name 图层名
	 * @returns 是否成功
	 */
	removeEntitiesLayer: (name: string) => Promise<boolean>;
	/**
	 * 矢量图层更名
	 * @param currentName 现在的图层名
	 * @param newName 新的的图层名
	 * @returns 是否成功
	 */
	renameEntitiesLayer: (currentName: string, newName: string) => Promise<boolean>;
	/**
	 * 清空矢量图层
	 * @param name 图层名
	 * @returns 是否成功
	 */
	clearEntitiesLayer: (name: string) => Promise<boolean>;
	/**
	 * 设置矢量图层可见
	 * @param name 图层名
	 * @param visible 是否可见
	 * @returns 是否成功
	 */
	setEntitiesLayerVisible: (name: string, visible: boolean) => Promise<void>;
	/**
	 * 矢量图层可见性
	 * @param name 图层名
	 * @returns 是否成功
	 */
	isEntitiesLayerVisible: (name: string) => Promise<boolean>;
	/**
	 * 矢量图层是否多媒体图层
	 * @param name 图层名
	 * @returns 是否成功
	 */
	isEntitiesLayerMedia: (name: string) => Promise<boolean>;
	/**
	 * 图层添加对象
	 * @param name 图层名
	 * @param entity 对象
	 * @returns 返回添加对象的id,返回''表示添加失败
	 */
	addEntity: (name: string, entity: Entity) => string;
	/**
	 * 图层批量添加对象
	 * @param name 图层名
	 * @param entities 对象数组
	 * @returns 成功/失败
	 */
	addEntities: (datasourceName: string, entities: Entity[]) => Promise<boolean>;
	/**
	 * 图层从json添加对象
	 * @param name 图层名
	 * @param jsonContent 对象json，like：{entities : Entity[]}
	 * @returns 成功/失败
	 */
	addEntitiesFromJson: (datasourceName: string, jsonContent: string) => Promise<boolean>;
	/**
	 * 图层从kml添加对象
	 * @param name 图层名
	 * @param kmlContent kml字符串
	 * @returns 成功/失败
	 */
	addEntitiesFromKml: (datasourceName: string, kmlContent: string, clampToGround?: boolean) => Promise<boolean>;
	/**
	 * 图层从kml/kmz地址添加对象
	 * @param name 图层名
	 * @param kmlUri kml/kmz地址
	 * @returns 成功/失败
	 */
	addEntitiesFromKmlURI: (datasourceName: string, kmlUri: string, clampToGround?: boolean) => Promise<boolean>;
	/**
	 * 图层从geojson添加对象
	 * @param name 图层名
	 * @param geojson FeatureCollection
	 * @returns 成功/失败
	 */
	addEntitiesFromGeojson: (datasourceName: string, geojson: FeatureCollection) => boolean;
	/**
	 * 图层删除对象
	 * @param name 图层名
	 * @param entityId 对象id
	 */
	removeEntity: (name: string, entityId: string) => Promise<boolean>;
	/**
	 * 图层获取对象
	 * @param name 图层名
	 * @param entityId 对象id
	 * @returns Entity对象
	 */
	getEntity: (name: string, entityId: string) => Entity | undefined;
	/**
	 * 获取地图对象数量
	 * @returns 地图对象数量
	 */
	getEntityCount: () => number;
	/**
	 * 获取地图图层数组
	 * @returns 地图对象数量
	 */
	getEntitiesLayerNames: () => Promise<Array<string>>;
	/**
	 * 获取图层所有的对象id
	 * @param datasourceName 图层名
	 * @returns id数组
	 */
	getLayerEntityIDs: (datasourceName: string) => Promise<Array<string>>;
	/**
	 * 获取图层所有的对象id
	 * @param datasourceName 图层名
	 * @returns id数组
	 */
	getLayerEntityCount: (datasourceName: string) => Promise<number>;
	/**
	 * 获取图层所有的对象
	 * @param datasourceName 图层名
	 * @returns entity数组
	 */
	getLayerEntities: (datasourceName: string, range?: {
		start?: number;
		end?: number;
	}) => Promise<Array<Entity>>;
	/**
	 * 获取一个图层中不重复的entity.name
	 * @param datasourceName 图层名
	 * @param expectEntityName 希望的名字
	 * @returns id数组
	 */
	noneExistEntityNameOfLayer: (datasourceName: string, expectEntityName: string) => Promise<string>;
	/**
	 * entity图层导出为kml字符串
	 * @param name 图层名
	 * @returns kml字符串
	 */
	exportLayerAsKml: (name: string) => Promise<string>;
	/**
	 * entity导出为kml字符串
	 * @param entityParams entity所在图层名及id参数的数组
	 * @returns
	 */
	exportEntityAsKml: (entityParams: {
		layerName: string;
		id: string;
	}[]) => Promise<string>;
	/**
	 * kml字符串中读取entities
	 * @param kmlContent kml字符串
	 * @returns
	 */
	entitiesFromKml: (kmlContent: string, clampToGround?: boolean) => Promise<Entity[]>;
	/**
	 * entity导出为geojson字符串
	 * @param entityParams entity所在图层名及id参数的数组
	 * @returns
	 */
	exportEntityAsGeojson: (entityParams: {
		layerName: string;
		id: string;
	}[]) => Promise<FeatureCollection>;
	/**
	 *  图层更新对象，
	 * @param name 图层名
	 * @param entity 对象,entity.id!==undefined&&图层包含entity.id
	 * @param polygonExtrudedHeightRalative polygon.extrudedHeight与面高度相对位置
	 * @returns 是否成功
	 *  */
	updateEntityModify: (datasourceName: string, entity: Entity, polygonExtrudedHeightRalative?: boolean) => boolean;
	/**
	 *  图层更新对象，
	 * @param name 图层名
	 * @param entityid
	 * @returns 是否成功
	 *  */
	updateEntityDelete: (datasourceName: string, entityId: string, type: string) => Promise<boolean>;
	/************* 批量更新 **************/
	updateLayerPOIMarkers: (layerName: string, markerStyle: PointGraphics | (ModelGraphics & {
		uri: string;
	}) | (BillboardGraphics & {
		image: string;
	})) => boolean;
	updateLayerModelsOrientation: (layerName: string, orientation: HeadingPitchRoll | PropertyAnimation<HeadingPitchRoll>, orientationAlongVelocity?: boolean) => boolean;
	upadateLayerPOILabels: (layerName: string, labelStyle: Omit<LabelGraphics, "text">, filter?: ("point" | "model" | "billboard")[]) => boolean;
	upadateLayerLabels: (layerName: string, labelStyle: Omit<LabelGraphics, "text">) => boolean;
	upadateLayerTerrainLabels: (layerName: string, labelStyle: Omit<TerrainLabel, "text">) => boolean;
	upadateLayerPolylines: (layerName: string, lineStyle: Omit<SolidLine, "positions"> | Omit<DashedLine, "positions"> | Omit<ContourLine, "positions"> | Omit<ArrowLine, "positions"> | Omit<HaloLine, "positions"> | Omit<WakeLine, "positions"> | Omit<DynamicLine, "positions"> | (Omit<RainbowLine, "positions"> & {
		colors: ColorNumber[];
	}) | (Omit<WallGraphics, "positions"> & {
		wallHeight: number;
	})) => boolean;
	upadateLayerPolygons: (layerName: string, lineStyle: Omit<NofillPolygon, "hierarchy"> | Omit<SolidPolygon, "hierarchy"> | Omit<GriddingPolygon, "hierarchy"> | Omit<StripePolygon, "hierarchy"> | Omit<ImagePolygon, "hierarchy"> | Omit<FeatherPolygon, "hierarchy">) => boolean;
	/**
	 * 添加切片缓存图层
	 * @param name 要添加的图层名
	 * @param url
	 * @returns 是否成功
	 */
	addS3MTilesLayer: (name: string, url: string) => Promise<boolean>;
	getS3MTilesLayers: () => S3MTilesLayer[];
	/**
	 * 获取所有切片缓存图层
	 * @returns 地图中所有切片缓存图层
	 */
	getS3MLayers: () => S3MLayer[];
	/**
	 * 移除切片缓存图层(不能移除scene中的切片图层)
	 * @param name 图层名
	 * @returns 是否成功
	 */
	removeS3MTilesLayer: (name: string) => Promise<boolean>;
	/**
	 * 获取 s3m 图层对象属性
	 * @param name 图层名
	 * @param id 对象id
	 * @returns 属性。获取失败返回 undefined
	 */
	getS3MLayerAttribute: (name: string, id: number) => Promise<Record<string, unknown> | undefined>;
	/**
	 * 设置S3M图层是否开启遮挡
	 * @param layer 要设置的图层名
	 * @param overlap 是否遮挡
	 */
	setS3MLayerOverlapDisplay: (layer: string, overlap: boolean) => Promise<void>;
	/**
	 * 设置S3M图标图层对应的文本图层
	 * @param iconLayer 图标图层名
	 * @param textLayer 文本图层名
	 */
	setS3MLayerRelatedTextLayer: (iconLayer: string, textLayer: string | undefined) => Promise<void>;
	/**
	 * set水面风格（不能设置图层组内图层风格）
	 * @param name 图层名
	 * @returns 是否成功
	 */
	setS3MTilesWaterStyle: (name: string, waterStyle: S3MWaterStyle) => Promise<boolean>;
	/**
	 * get水面风格（不能设置图层组内图层风格）
	 * @param name 图层名
	 * @returns 是否成功
	 */
	getS3MTilesWaterStyle: (name: string) => Promise<S3MWaterStyle | undefined>;
	/**
	 * 设置切片图层可见（不能设置图层组内图层可见性）
	 * @param name 图层名
	 * @param visible 是否可见
	 * @returns 是否成功
	 */
	setTilesLayerVisible: (name: string, visible: boolean) => Promise<void>;
	/**
	 * 切片图层可见性
	 * @param name 图层名
	 * @returns 是否可见
	 */
	isTilesLayerVisible: (name: string) => Promise<boolean>;
	/**
	 * 设置切片是否反色
	 * @param name 图层名
	 * @param isRGBTOBGR 是否反色
	 * @returns 是否成功
	 */
	setTilesLayerRGBTOBGR: (name: string, isRGBTOBGR: boolean) => Promise<void>;
	/**
	 * 切片图层是否反色
	 * @param name 图层名
	 * @returns 是否反色
	 */
	isTilesLayerRGBTOBGR: (name: string) => Promise<boolean>;
	/**
	 * 设置是否开启透明排序功能（OIT）
	 * @param name 图层名
	 * @param isOrderIndependentTranslucency
	 * @returns 是否成功
	 */
	setTilesLayerOrderIndependentTranslucency: (name: string, isOrderIndependentTranslucency: boolean) => Promise<void>;
	/**
	 * 是否开启透明排序功能（OIT）
	 * @param name 图层名
	 * @returns 是否反色
	 */
	isTilesLayerOrderIndependentTranslucency: (name: string) => Promise<boolean>;
	/**
	 * 设置切片图层的LOD层级切换距离缩放系数
	 * @param name 图层名
	 * @param lodRangeScale
	 */
	setTilesLayerLodRangeScale: (name: string, lodRangeScale: number) => Promise<void>;
	/**
	 * 切片图层的LOD层级切换距离缩放系数
	 * @param name 图层名
	 * @returns 切片图层的LOD层级切换距离缩放系数
	 */
	getTilesLayerLodRangeScale: (name: string) => Promise<number>;
	/**
	 * 设置切片重新计算法线
	 * @param name 图层名
	 * @param ignoreNormal 是否重新计算
	 * @returns 是否成功
	 */
	setTilesLayerIgnoreNormal: (name: string, ignoreNormal: boolean) => Promise<void>;
	/**
	 * 切片是否重新计算法线
	 * @param name 图层名
	 * @returns
	 */
	getTilesLayerIgnoreNormal: (name: string) => Promise<boolean>;
	/**
	 * 设置切片底部高程
	 * @param name 图层名
	 * @param bottomAltitude 底部高程
	 * @returns 是否成功
	 */
	setTilesLayerBottomAltitude: (name: string, bottomAltitude: number) => Promise<void>;
	/**
	 * 切片底部高程
	 * @param name 图层名
	 * @returns 切片底部高程
	 */
	getTilesLayerBottomAltitude: (name: string) => Promise<number>;
	/**
	 * 打开天地图三维注记
	 * @param option 天地图的token等信息，传 undefiend 为关闭三维注记
	 * @returns 是否成功
	 */
	openAnnotation3D: (option?: {
		token: string;
		displayDistance?: number;
	}) => Promise<boolean>;
	/**
	 * 设置三维注记图层显隐
	 * @param visible 是否显示
	 * @returns 是否成功
	 */
	setAnnotation3DVisible: (visible: boolean) => Promise<boolean>;
	/**
	 * 设置天空盒
	 * @param skybox 天空盒图片资源地址 传 undefeind 为关闭自定义天空盒
	 * @returns 是否成功
	 */
	setSkybox: (skybox?: SkyboxResource) => Promise<boolean>;
	/**
	 * 设置天空盒可见
	 * @param visible 是否可见
	 * @returns 是否成功
	 */
	setSkyboxVisible: (visible: boolean) => Promise<boolean>;
	/**
	 * 获取当前设置的天空盒
	 * @returns 当前的天空盒。没有设置返回 undefined
	 */
	getSkybox: () => Skybox | undefined;
	/**
	 * 设置大气参数
	 * @param option 大气参数
	 * @returns 是否成功
	 */
	setAtmosphere: (option: Atmosphere) => Promise<boolean>;
	/**
	 * 获取当前大气设置
	 * @returns 当前大气设置参数
	 */
	getAtmosphere: () => Required<Atmosphere>;
	/**
	 * 设置太阳参数
	 * @param option 太阳参数
	 * @returns 是否成功
	 */
	setSun: (option: Sun) => Promise<boolean>;
	/**
	 * 获取当前太阳参数
	 * @returns 当前太阳参数
	 */
	getSun: () => Required<Sun>;
	/**
	 * 设置经纬网参数
	 * @param param 经纬网参数
	 * @returns
	 */
	setGraticulesParam: (param?: GraticuleParam) => void;
	/**
	 * 获取经纬网参数
	 * @returns 经纬网参数
	 */
	getGraticulesParam: () => GraticuleParam | undefined;
	/**
	 * 设置经纬网可见性
	 * @param param 经纬网可见性
	 * @returns
	 */
	setGraticuleVisible: (visible: boolean) => void;
	/**
	 * 获取经纬网可见性
	 * @returns 经纬网可见性
	 */
	getGraticuleVisible: () => boolean;
	/**
	 * 设置地球光照阴影参数
	 * @param param 地球光照阴影参数
	 */
	setLighting: (param: GlobeLighting) => Promise<void>;
	/**
	 * 获取当前地图地球光照阴影参数
	 * @returns 地球光照阴影参数
	 */
	getLighting: () => GlobeLighting;
	/**
	 * 设置对象阴影
	 * @param param 对象阴影参数
	 */
	setShadow: (param: Shadow) => Promise<void>;
	/**
	 * 获取当前地图对象阴影参数
	 * @returns 对象阴影参数
	 */
	getShadow: () => Promise<Shadow>;
	/**
	 * 设置雾化效果
	 * @param param 雾化效果参数
	 */
	setFog: (param: Fog) => Promise<void>;
	/**
	 * 获取当前地图雾化效果参数
	 * @returns 雾化效果参数
	 */
	getFog: () => Fog;
	/**
	 * 设置地形深度检测
	 * @param enable 是否开启地图深度检测
	 */
	setDepthTestAgainstTerrain: (enable: boolean) => Promise<void>;
	/**
	 * 当前地图是否开启地图深度检测
	 * @returns 是否开启地图深度检测
	 */
	isDepthTestAgainstTerrain: () => boolean;
	/**
	 * 当前地图是否开启hdr
	 * @returns 是否开启hdr
	 */
	isHdrEnable: () => Promise<boolean>;
	/**
	 * 获得最大视距
	 * @returns 最大视距
	 */
	getMaximumZoomDistance: () => number;
	/**
	 * 设置最大视距
	 * @param value 设置的值
	 * @returns
	 */
	setMaximumZoomDistance: (value: number) => void;
	/**
	 * 设置是否开启hdr
	 * @param enable 是否开启hdr
	 */
	setHdrEnable: (enable: boolean) => Promise<void>;
	/**
	 * 设置泛光效果
	 * @param param 泛光效果参数
	 */
	setBloomEffect: (param: BloomEffect) => Promise<void>;
	/**
	 * 获取当前地图泛光效果参数
	 * @returns 泛光效果参数
	 */
	getBloomEffect: () => Promise<BloomEffect>;
	/**
	 * 设置场景模式
	 * @param mode 场景模式
	 */
	setSceneMode: (mode: SceneMode) => Promise<void>;
	/**
	 * 获取当前场景模式
	 * @returns 当前场景模式
	 */
	getSceneMode: () => Promise<SceneMode>;
	/**
	 * 设置加载realityMesh时内存限制（单位MB）
	 *
	 * @param limit
	 */
	setRealityMeshMemoryLimit: (limited: number) => void;
	/**
	 * 获取加载realityMesh时内存限制（单位MB）
	 * @returns limit
	 */
	getRealityMeshMemoryLimit: () => number;
	/**
	 * 设置地图清晰度，会保存到地图设置中
	 *
	 * @param quality 显示质量 范围 0 - 100
	 */
	setMapQuality: (quality: number) => void;
	/**
	 * 获取当前地图清晰度
	 * @returns 当前地图清晰度 范围 0 - 100
	 */
	getMapQuality: () => number;
	/**
	 * 设置相机拖动逻辑
	 * @param typeString
	 *  CDT_1 : 1.漫游：左键  2.倾斜：中键；ctrl+左键；ctrl+右键  3.推近：右键；滚轮
	 *  CDT_2 : 1.漫游：左键  2.倾斜：右键；ctrl+右键  3.推近：中键；滚轮；ctrl+左键
	 */
	setCameraDragMode: (typeString: "CDT_1" | "CDT_2") => void;
	/**
	 * 获取当前地图清晰度
	 * @returns 当前地图清晰度 范围 0 - 100
	 */
	getCameraDragMode: () => "CDT_1" | "CDT_2";
	/**
	 * 动态设置场景清晰度。不影响当前地图的设置
	 *
	 * @param quality 显示质量 范围 0 - 100
	 */
	setSceneQuality: (quality: number) => void;
	/**
	 * 获取当前场景清晰度
	 * @returns 当前场景清晰度 范围 0 - 100
	 */
	getSceneQuality: () => number;
	/**
	 * 显示 fps 信息。默认不显示
	 * @param show 是否显示
	 */
	showDebugFPS: (show: boolean) => Promise<void>;
	/**
	 * 是否显示 fps 信息
	 */
	isShowDebugFPS: () => boolean;
	/**
	 * 获取最新的每秒渲染帧数 FPS
	 * @returns 当前帧率
	 */
	getFPS: () => Promise<number>;
	/**
	 * 是否开启主动刷新
	 */
	setRequestRenderMode: (value: boolean) => void;
	/**
	 * 获取当前是否为主动刷新模式
	 */
	getRequestRenderMode: () => boolean;
	/**
	 * 屏幕点转经纬度类型三维点
	 * @param screenPoint 屏幕点
	 * @param isGlobePoint 该参数已经废弃，直接从球面上pick
	 * @returns
	 */
	pickPosition: (screenPoint: Vector2, isGlobePoint?: boolean) => Vector3 | null;
	/**
	 * 屏幕点击取对象
	 * @param screenPoint 屏幕点
	 * @returns
	 */
	pickElement: (screenPoint: Vector2) => {
		elementType: "primitive" | "entity" | "s3m" | "tracking";
		layerName: string;
		elementId: string;
	} | undefined;
	/**
	 * 颜色校正参数设置方法
	 * @param param 颜色校正参数
	 * @returns
	 */
	setColorCorrection: (param: ColorCorrectionType) => Promise<boolean>;
	/**
	 * 颜色校正参数获取方法
	 * @returns 颜色校正参数
	 */
	getColorCorrection: () => ColorCorrectionType;
	/**
	 * 设置云层纹理
	 * @param url 纹理图片地址
	 * @returns
	 */
	setCloudImage: (url?: string) => Promise<boolean>;
	/**
	 * 云层是否显示，在显示之前需要先吊用setCloudImage设置一个云层纹理
	 * @param show 为true显示云层，为false不显示云层
	 * @returns
	 */
	showCloud: (show: boolean) => Promise<boolean>;
	/**
	 * 获取云层设置
	 * @returns 云层设置。未设置返回 undefined
	 */
	getCloud: () => Clouds | undefined;
	/**
	 * 获取当前action
	 * @returns action
	 */
	getAction: () => SceneAction;
	/**
	 * 设置action
	 * @param action
	 * @returns 设置是否成功
	 */
	setAction: (action: SceneAction) => boolean;
	/**
	 * 播放属性动画
	 * @returns 设置是否成功
	 */
	startPropertyAnimation: () => Promise<boolean>;
	/**
	 * 停止属性动画
	 * @returns 设置是否成功
	 */
	stopPropertyAnimation: () => Promise<boolean>;
	/**
	 * 暂停属性动画
	 * @returns 设置是否成功
	 */
	pausePropertyAnimation: () => Promise<boolean>;
	/**
	 * 全幅矢量层
	 * @param layerName 矢量图层名
	 * @param duration 动画时间
	 * @returns 设置是否成功
	 */
	viewEntireEntitiesLayer: (layerName: string, duration: number) => Promise<boolean>;
	/**
	 * 全幅矢量
	 * @param entities 矢量数组
	 * @param duration 动画时间
	 * @returns 设置是否成功
	 */
	viewEntireEntities: (entities: {
		layerName: string;
		entityId: string;
	}[], duration: number) => Promise<boolean>;
	/**
	 * 全幅S3M图层
	 * @param layerName 图层名
	 * @param duration 动画时间
	 * @returns 设置是否成功
	 */
	viewEntireS3MLayer: (layerName: string, duration: number) => Promise<boolean>;
	/**
	 * 全幅影像图层
	 * @param layerName 图层名
	 * @param duration 动画时间
	 * @returns 设置是否成功
	 */
	viewEntireImageLayer: (index: number, duration: number) => Promise<boolean>;
	/**
	 * 全幅Geojson
	 * @param layerName 图层名
	 * @param duration 动画时间
	 * @returns 设置是否成功
	 */
	viewEntireGeojson: (geojson: FeatureCollection, duration: number) => Promise<boolean>;
	/**
	 * 全幅矢量
	 * @param entities 矢量数组
	 * @param duration 动画时间
	 * @returns 设置是否成功
	 */
	viewEntireEntitiesList: (entities: Entity[], duration: number) => Promise<boolean>;
	/**
	 * 设置时间轴当前时间
	 * @param time 当前时间
	 */
	zoomToTime: (time: GregorianDate) => Promise<void>;
	/**
	 * 获取时间轴当前时间
	 * @returns 当前时间
	 */
	getCurrentTime: () => GregorianDate;
	/**
	 * 计算距离
	 * @param positions 计算距离的点集
	 * @param clampModeParam 计算距离的模式
	 * @returns
	 */
	calcDistanceValue: (positions: Array<Vector3>, clampModeParam: ClampType) => number;
	/**
	 * 计算面积
	 * @param positions 计算面积的点集
	 * @param clampModeParam 计算面积的模式
	 * @returns
	 */
	calcAreaValue: (positions: Array<Vector3>, clampModeParam: ClampType) => Promise<number>;
	/** 设置当前天气
	 * @param 天气参数
	 */
	setWeather: (weather?: Rain | Snow | null) => Promise<boolean>;
	/**
	 * 获取天气参数
	 * @returns 当前天气
	 */
	getWeather: () => Rain | Snow | null;
	/**
	 * 设置地图手势可用
	 * @param 地图手势是否可用
	 */
	enableSceneTouch: (enabled: boolean) => void;
	/** 等高显示设置 */
	setHypsometricSetting: (setting: Pick<HypsometricSetting, "mode"> & Partial<HypsometricSetting>) => Promise<boolean>;
	/** 获取等高显示设置 */
	getHypsometricSetting: () => Pick<HypsometricSetting, "mode"> & Partial<HypsometricSetting>;
	/**
	 * 设置地形夸张系数
	 * @param ratio 地形夸张系数，需要大于 0
	 */
	setTerrainExaggeration: (ratio: number) => Promise<void>;
	/**
	 * 获取地形夸张系数
	 * @returns 地形夸张系数
	 */
	getTerrainExaggeration: () => number;
	/**
	 * 设置球面平移目标
	 * @param layerName 图层名
	 * @param entityId 对象id
	 * @returns 是否成功
	 */
	beginTranslation: (layerName: string, entityId: string, type?: "entity" | "trackingLayer" | "primitive") => boolean;
	endTranslation: (isUpdateModified: boolean) => void;
	/**
	 * 球面平移目标高度调整
	 * @param delta 调整高度
	 */
	translationHeight: (delta: number) => void;
	/**
	 * 球面沿经纬度按距离平移
	 * @param currentPosition 经纬度位置 废弃
	 * @param delta_x 沿着纬线移动距离 =>> 改为向右移动距离
	 * @param delta_y 沿着经线移动距离 =>> 改为向前移动距离
	 */
	translationXYDistance: (currentPosition: Vector3, delta_x: number, delta_y: number) => void;
	/**
	 * 球面平移设置目标绝对位置
	 * @param position
	 */
	translationAnchorToPosition: (position: Vector3) => void;
	/**
	 * 当前球面平移结果
	 * @returns {x:精度偏移量,y:维度偏移量,z:高度偏移量}
	 */
	translationCurrentDelta: () => Vector3;
	/**
	 * 截取地球Canvas图片
	 * @param params 图片参数
	 * @returns 图片路径
	 */
	getScreenShot: (params: Partial<ScreenShot>) => string;
	/**
	 * 获取幻灯片列表
	 * @returns 幻灯片列表
	 */
	getSlideShow: () => Promise<Slide[]>;
	/**
	 * 获取幻灯片列表长度
	 * @returns 幻灯片列表长度
	 */
	getSlideCount: () => Promise<number>;
	/**
	 * 设置幻灯片列表
	 * @param slideShow 幻灯片列表
	 */
	setSlideShow: (slideShow: Slide[]) => Promise<void>;
	/**
	 * 获取索引处幻灯片
	 * @param index 索引
	 * @returns 幻灯片
	 */
	getSlideAtIndex: (index: number) => Promise<Slide | undefined>;
	/**
	 * 在索引处插入幻灯片
	 * @param slide 幻灯片
	 * @param index 索引(undefined插入在列表末尾)
	 */
	insertSlideAtIndex: (slide: Slide, index?: number) => Promise<void>;
	/**
	 * 更新索引处幻灯片
	 * @param slide 幻灯片
	 * @param index 索引
	 */
	updateSlideAtIndex: (slide: Slide, index: number) => Promise<void>;
	/**
	 * 删除索引处幻灯片
	 * @param index 索引
	 */
	removeSlideAtIndex: (index: number) => Promise<void>;
	/**
	 * 删除幻灯片播放列表
	 */
	clearSlideShow: () => Promise<void>;
	/**
	 * 设置资源文件请求的base路径
	 * 未设置则从当前url读取
	 */
	setResourceBase: (base: string) => void;
	/**
	 * 设置本地资源文件请求的base路径
	 */
	setLocalResourceBase: (base: string) => void;
	/**
	 * 设置本地符号资源文件请求的base路径
	 */
	setLocalSymbolBase: (base: string) => void;
	updateEntityLayerPointByDiff: (layer: string, diff: Partial<IPointStyle>) => void;
	updateEntityLayerPointLabelByDiff: (layer: string, diff: Partial<IPointStyle>) => void;
	updateEntityLayerLineByDiff: (layer: string, diff: Partial<ILineStyle>) => void;
	updateEntityLayerRegionByDiff: (layer: string, diff: Partial<IRegionStyle>) => void;
	updateEntityLayerLabelByDiff: (layer: string, diff: Partial<ILabelStyle>) => void;
	updateEntityLayerTerrainLabelByDiff: (layer: string, diff: Partial<ILabelStyle>) => void;
};
declare enum MeasureType {
	/** 测面积模式 */
	Area = "Area",
	/** 测距离模式 */
	Distance = "Distance",
	/** 空间距离、水平距离、垂直距离三分量量算模式（测高模式） */
	DVH = "DVH"
}
export interface InitMeasureParam {
	/** 绘制，量算几何对象风格类型 */
	clampMode?: ClampType;
	/** 椭球类型 */
	ellipsoidType?: EllipsoidType;
	/** 是否显示标签 */
	isShowLabel?: boolean;
	/** 是否显示等高线 */
	isShowContourLine?: boolean;
}
export interface MeasureResultDVHparam {
	/** 空间距离 */
	distance: number;
	/** 垂直距离 */
	vDistance: number;
	/** 水平距离 */
	hDistance: number;
}
/**
 * 量算
 */
export type IMeasure = {
	/**
	 * 开始测量
	 * @param measureTypeParam 测量类型
	 * @param Param 测量参数
	 * @returns boolean 是否执行完成
	 */
	beginMeasure: (measureTypeParam: MeasureType, Param: InitMeasureParam) => Promise<boolean>;
	/**
	 * 撤销当前测量（已提交的测量，不可撤销)
	 * @returns Promise<void>
	 */
	undo: () => Promise<boolean>;
	/**
	 * 提交测量 （结束当前测量，可开始下一测量）
	 * @returns Promise<void>
	 */
	completed: () => Promise<boolean>;
	/**
	 * 清空所有测量
	 * @returns Promise<void>
	 */
	clear: () => Promise<boolean>;
	/**
	 * 添加测量点
	 * @param position 测量点 经纬度类型的三维点
	 * @returns Promise<void>
	 */
	addPoint: (position: Vector3) => Promise<void>;
	/**
	 * 添加预览点
	 * @param position 预览点 经纬度类型的三维点
	 * @param isShowPreview 是否显示预览效果
	 * @returns
	 */
	updatePreviewPoint: (position: Vector3 | Vector2, isShowPreview: boolean) => Promise<boolean>;
	/**
	 * 获取预览的量算结果， 调用之前需要先调用updatePreviewPoint方法
	 * @returns 预览量算结果，成功线面返回数字，高度返回对象，失败返回-1
	 */
	getPreviewMeasureResult: () => Promise<number | MeasureResultDVHparam>;
};
declare const enums: {
	LineType: typeof LineType;
	AnimatorType: typeof AnimatorType;
	ClampType: typeof ClampType;
	BingMapsStyle: typeof BingMapsStyle;
	ProviderType: typeof ProviderType;
	TiandituMapsStyle: typeof TiandituMapsStyle;
	ClassificationType: typeof ClassificationType;
	PolygonGrowType: typeof PolygonGrowType;
	ScreenPosition: typeof ScreenPosition;
	FillType: typeof FillType;
	SceneAction: typeof SceneAction;
	HeightReference: typeof HeightReference;
	SceneAnimationType: typeof SceneAnimationType;
	WeatherType: typeof WeatherType;
	SlideTransitionType: typeof SlideTransitionType;
	SceneMode: typeof SceneMode;
	ScanEffectMode: typeof ScanEffectMode;
	FlyPresetType: typeof FlyPresetType;
	MeasureType: typeof MeasureType;
	EllipsoidType: typeof EllipsoidType;
	PrimitiveType: typeof PrimitiveType;
	SLineType: typeof SLineType;
	TilingSchemeType: typeof TilingSchemeType;
	VerticalOrigin: typeof VerticalOrigin;
};
export interface RouteStop {
	/** 站点名称 */
	name: string;
	/** 站点序号 */
	index: number;
	/** 到下一站点时长 */
	duration: number;
}
export interface SuperMap3DEvent {
	/** 飞行站点抵达回调 */
	fly_stop_arrived: RouteStop;
	/** 选中Entity回调 */
	selected_entity: {
		layerName: string;
		entityId: string;
	}[];
	/** s3m选中回调 */
	selected_s3m: {
		layerName: string;
		id: number;
	}[];
	/** 选中Primitive回调 */
	selected_primitive: {
		layerName: string;
		primitiveId: string;
	}[];
	/** 动画播放回调。返回动画的id。 */
	onAnimationPlay: string;
	/** 动画暂停回调。返回动画的id。 */
	onAnimationPause: string;
	/** 动画停止回调。返回动画的id。 */
	onAnimationStop: string;
	/** 动画播放完成回调。返回动画的id。对从地图播放的动画来说，返回的是地图id的字符串 */
	onAnimationEnd: string;
	/** 打开地图时s3m图层加载完成回调 */
	onS3mLayersAdded: boolean;
	/** touch监听 'touchBegin' 'touchEnd' 'touchMove' ‘touchClick’ */
	touch_event: {
		eventType: "touchBegin" | "touchEnd" | "touchMove" | "touchClick";
		x: number;
		y: number;
		prex?: number;
		prey?: number;
	};
	translation_end_event: Vector3;
	/** 鼠标右键点击事件 */
	right_click: {
		x: number;
		y: number;
	};
	record_blob: string;
	onCacheConnectionClose: undefined;
}
export type IGeometrist = {
	/**
	 * Catmull-ROM样条
	 * @param points 控制点
	 * @param count 插值点个数
	 * @returns 插值点串
	 */
	pointsOfCatmullRomSpline: (controlPoints: Vector3[] | number[], count: number) => number[];
	/**
	 * 埃尔米特样条
	 * @param points 控制点
	 * @param count 插值点个数
	 * @returns 插值点串
	 */
	pointsOfHermiteSpline: (controlPoints: Vector3[] | number[], count: number) => number[];
	/**
	 * 由直线段生成箭头
	 * @param start 线段起点
	 * @param end 线段终点
	 * @param lineWidth 箭柄线宽 默认值为0.25（默认基于长度百分比）
	 * @param lineLength 箭柄线长 默认值为0.7（默认基于长度百分比）
	 * @param byPercent 箭柄线宽/长设置是否基于百分比（false表示值为绝对长度-单位米）
	 * @returns 箭头点串
	 */
	arrowWithLineSegment: (start: Vector3, end: Vector3, lineWidth?: number, lineLength?: number, byPercent?: boolean) => number[];
	/**
	 * 圆形
	 * @param center 圆心点
	 * @param radius 半径（米）
	 * @param count 分片数量，默认72
	 * @returns 圆弧点串（高度z与圆心一致）
	 */
	pointsOfCircle: (center: Vector3 | [
		number,
		number,
		number,
		...number[]
	], radius: number, count?: number) => number[];
	/**
	 * 矩形
	 * @param center 矩形中心点
	 * @param w 宽（米）
	 * @param h 高（米）
	 * @param heading 朝向
	 * @returns 矩形
	 */
	pointsOfRectangle: (center: Vector3 | [
		number,
		number,
		number,
		...number[]
	], w: number, h: number, heading: number) => number[];
	/**
	 * heading
	 * @param center
	 * @param point
	 * @returns heading
	 */
	headingCompute: (center: Vector3, point: Vector3) => number;
	/**
	 * 面相交
	 * @param polygon1
	 * @param polygon2
	 * @returns
	 */
	polygonIntersect: (polygon1: PolygonHierarchy, polygon2: PolygonHierarchy) => PolygonHierarchy[];
	/**
	 * 面合并
	 * @param polygon1
	 * @param polygon2
	 * @returns
	 */
	polygonUnion: (polygon1: PolygonHierarchy, polygon2: PolygonHierarchy) => PolygonHierarchy[];
	/**
	 * 面擦除
	 * @param erase
	 * @param srcPolygon
	 * @returns
	 */
	polygonErase: (erase: PolygonHierarchy, srcPolygon: PolygonHierarchy) => PolygonHierarchy[];
	/**
	 * 线重采样
	 * @param line
	 * @param tolerance 指定的重采样容限 默认1e-6
	 * @returns
	 */
	resampleLine: (line: number[] | Vector3[], tolerance?: number) => number[];
	/**
	 * 面重采样
	 * @param polygon
	 * @param tolerance 指定的重采样容限 默认1e-6
	 * @returns
	 */
	resamplePolygon: (polygon: PolygonHierarchy, tolerance?: number) => PolygonHierarchy | undefined;
	/**
	 * 线平滑
	 * @param line
	 * @param smoothness 光滑系数有效范围为大于等于2，设置为小于2的值会抛出异常，光滑系数越大，线对象节点数越多，也就越光滑。 建议取值范围为[2,10]。默认2
	 * @returns
	 */
	smoothLine: (line: number[] | Vector3[], smoothness?: number) => number[];
	/**
	 * 面平滑
	 * @param polygon
	 * @param smoothness 光滑系数有效范围为大于等于2，设置为小于2的值会抛出异常，光滑系数越大，线对象节点数越多，也就越光滑。 建议取值范围为[2,10]。默认2
	 * @returns
	 */
	smoothPolygon: (polygon: PolygonHierarchy, smoothness?: number) => PolygonHierarchy | undefined;
};
export type IMagnifier = {
	/**
	 * 放大镜是否显示
	 * @returns 显示/隐藏
	 */
	isShow: () => Promise<boolean>;
	/**
	 * 放大镜显隐
	 * @param isShow 显示/隐藏
	 * @returns
	 */
	setShow: (isShow: boolean) => Promise<void>;
	/**
	 * 更新放大镜（option===undefine时采用上次设置的参数）
	 * @param focus 放大镜焦点（默认为屏幕中心）
	 * @param ancher 放大镜中心锚点（默认为屏幕中心）
	 * @param scale 放大倍数（默认2）
	 * @param radius 放大镜半径（默认100）
	 * @returns 成功/失败
	 */
	update: (option?: {
		focus?: Vector2;
		ancher?: Vector2;
		scale?: number;
		radius?: number;
	}) => Promise<void>;
};
export type IParticleLayers = {
	/**
	 * 添加图层（已有同名图层添加失败）
	 * @param name 图层名
	 * @returns 成功/失败
	 */
	addParticleLayer: (name: string) => Promise<boolean>;
	/**
	 * 删除图层
	 * @param name 图层名
	 * @returns 成功/失败
	 */
	removeParticleLayer: (name: string) => Promise<boolean>;
	/**
	 * 删除所有图层
	 * @returns 成功/失败
	 */
	removeAllParticleLayers: () => Promise<boolean>;
	/**
	 * 清空图层
	 * @param name 图层名
	 * @returns 成功/失败
	 */
	clearParticleLayer: (name: string) => Promise<boolean>;
	/**
	 * 图层是否可见
	 * @param name 图层名
	 * @returns 成功/失败
	 */
	isParticleLayerVisible: (name: string) => boolean;
	/**
	 * 设置图层是否可见
	 * @param name 图层名
	 * @param isVisible 是否可见
	 */
	setParticleLayerVisible: (name: string, isVisible: boolean) => Promise<void>;
	/**
	 * 获取所有粒子图层名
	 * @returns 图层名数组
	 */
	getParticleLayerNames: () => string[];
	/**
	 * 重命名
	 * @param oldName 原图层名
	 * @param newName 新图层名
	 * @returns 成功/失败
	 */
	renameParticleLayer: (oldName: string, newName: string) => Promise<boolean>;
	/**
	 * 图层添加粒子对象
	 * @param name 图层名
	 * @param particleName 粒子id
	 * @param particleUrl json路径
	 * @param param 参数
	 * @returns 粒子对象id
	 */
	layerAddParticle: (name: string, particleName: string, particleUrl: string, param?: Partial<ParticleParam>) => Promise<string>;
	/**
	 * 图层删除粒子对象
	 * @param name 图层名
	 * @param particleName 粒子id
	 * @returns 成功/失败
	 */
	layerRemoveParticle: (name: string, particleId: string) => Promise<boolean>;
	/**
	 * 获取图层所有粒子对象
	 * @param name 图层名
	 * @returns 粒子对象数组
	 */
	layerParticles: (name: string, range?: {
		start?: number;
		end?: number;
	}) => Particle[];
	/**
	 * 更新图层粒子对象
	 * @param name 图层名
	 * @param particleName 粒子id
	 * @param param 参数
	 * @returns 成功/失败
	 */
	layerModifyParticle: (name: string, particleId: string, param: Partial<ParticleParam>) => Promise<boolean>;
	/**
	 * 获取指定指定的粒子特效对象
	 * @param layerName 图层名
	 * @param id 粒子特效对象id
	 */
	getParticle: (layerName: string, id: string) => Particle | undefined;
	/** 获取指定图层中可用粒子特效名称 */
	getAvailableName: (layerName: string, name: string) => string;
	/** 获取图层对象个数 */
	getParticleCount: (layerName: string) => number;
	/** 获取所有对象个数 */
	getAllCount: () => number;
};
/**
 * 扫描线效果
 * 使用时需要开启深度检测
 */
export type IScanEffect = {
	/**
	 * 设置扫描线显隐
	 * @param show 是否显示
	 */
	show: (show: boolean) => Promise<void>;
	/**
	 * 获取扫描线个数
	 * @returns 扫描线个数
	 */
	getCount: () => Promise<number>;
	/**
	 * 添加起点或中心点
	 * @param point
	 * @returns 是否添加成功
	 */
	addCenter: (point: Vector3) => Promise<boolean>;
	/**
	 * 设置线模式下最后一条线的运动方向上的一个点
	 * @param direction 运动方向上的点
	 * @returns 是否设置成功
	 */
	setMoveDirection: (direction: Vector3) => Promise<boolean>;
	/**
	 * 移除指定位置的扫描线
	 * @param index 要移除的扫描线index
	 * @returns 是否移除成功
	 */
	remove: (index: number) => Promise<boolean>;
	/**
	 * 设置扫描线模式
	 * @param mode 扫描线模式
	 */
	setEffectMode: (mode: ScanEffectMode) => Promise<void>;
	/**
	 * 设置线颜色
	 * @param color 颜色。分别对应 rgba, 默认 [1,1,1,1]
	 * @returns
	 */
	setColor: (color: [
		number,
		number,
		number,
		number
	]) => Promise<void>;
	/**
	 * 设置扫描线纹理
	 * @param url 纹理地址
	 */
	setTextureUrl: (url: string) => Promise<void>;
	/**
	 * 设置线宽
	 * @param width 线宽。单位 米
	 */
	setWidth: (width: number) => Promise<void>;
	/**
	 * 设置扫描一次的时长
	 * @param period 时长。单位 秒
	 */
	setPeriod: (period: number) => Promise<void>;
	/**
	 * 设置扫描速度
	 * @param speed 速度。单位 米/秒
	 */
	setSpeed: (speed: number) => Promise<void>;
	/**
	 * 获取当前扫描线参数
	 * @returns 扫描线参数
	 */
	getEffect: () => Promise<ScanEffect>;
	/** 重置扫描线参数 */
	reset: () => Promise<void>;
};
export type ITileCache = {
	/**
	 * 连接到本地缓存服务器
	 * @param wsPort websocket端口
	 * @param httpPort http端口
	 */
	connectToServer(wsPort: number, httpPort: number): void;
	/**
	 * 断开本地缓存服务器
	 */
	disconnectFromServer(): void;
};
/**
 * 场景
 */
export type ITrackingLayer = {
	/**
	 * 清空临时层
	 * @return 成功/失败
	 */
	removeAll: () => Promise<boolean>;
	/**
	 * 临时层添加对象 ,id不为空
	 * @return 成功/失败
	 */
	addEntity: (entity: Entity) => Promise<boolean>;
	/**
	 * 临时层高亮面轮廓
	 * layerName 图层名
	 * entityId 对象id
	 * @return 临时层轮廓线id
	 */
	addPolygonOutLine: (layerName: string, entityId: string) => Promise<string>;
	/**
	 * 临时层更新对象
	 * @param entity 更新对象描述（entity.id!==undefined，只有需更新字段有值）
	 * @returns 成功/失败
	 */
	updateEntityModify: (entity: Entity) => Promise<boolean>;
	/**
	 * 临时层更新删除对象部分内容
	 * @param entityId 更新对象Id
	 * @param type 删除内容描述 'label'｜'billboard'｜'model'｜'point'｜'polyline'｜'polygon'
	 * @returns 成功/失败
	 */
	updateEntityDelete: (entityId: string, type: string) => Promise<boolean>;
	/**
	 * 临时层删除对象
	 * @param entityId 对象Id
	 * @returns 成功/失败
	 */
	removeEntity: (entityId: string) => Promise<boolean>;
	/**
	 * 临时层获取对象对象
	 * @param entityId 对象Id
	 * @returns 找到返回对象Entity或未找到返回undefined
	 */
	getEntity: (entityId: string) => Promise<Entity | undefined>;
	/**
	 * 判断对象是否在临时层
	 * @param entityId 对象Id
	 * @returns 是/否
	 */
	onTrackingLayer: (entityId: string) => string | undefined;
	/**
	 * 获取所有tracking对象id
	 */
	getAllTrackingIds: () => string[];
	/**
	 * 飞行到指定对象上
	 */
	flyTo: (name: string, duration?: number) => void;
	/**
	 * 手绘使用添加接口
	 */
	createPolyline: (classificationType: ClassificationType, positions?: Vector3[] | number[]) => Promise<boolean>;
	createPolygon: (classificationType: ClassificationType, positions?: Vector3[] | number[]) => Promise<boolean>;
	createAddVertex: (vertexPosition: Vector3 | Vector2) => Promise<boolean>;
	createEnd: () => Promise<Vector3[]>;
	/** 临时层矢量编辑 */
	/** 线编辑，同时只支持一例线编辑*/
	/** 开始作业
	 */
	/**
	 * 开始线编辑
	 * @param classificationType 贴地模式
	 * @param positions 节点数组（支持传入undefine或空数）
	 * @returns 开始成功/失败
	 */
	editPolyline: (classificationType: ClassificationType, positions?: Vector3[] | number[]) => Promise<boolean>;
	/**
	 * 开始面编辑
	 * @param classificationType 贴地模式
	 * @param positions 节点数组（支持传入undefine或空数）
	 * @returns 开始成功/失败
	 */
	editPolygon: (classificationType: ClassificationType, positions?: Vector3[] | number[]) => Promise<boolean>;
	/**
	 * 开始圆
	 * @param classificationType 贴地模式
	 * @param isFilled 是否填充
	 * @param center 圆心点
	 * @param radius 半径（默认为0）
	 * @returns 开始成功/失败
	 */
	editCircle: (classificationType: ClassificationType, isFilled: boolean, center?: Vector3, radius?: number) => Promise<boolean>;
	/**
	 * 开始矩形
	 * @param classificationType 贴地模式
	 * @param isFilled 是否填充
	 * @param center 中心点
	 * @param heading 朝向
	 * @param w/h
	 * @returns 开始成功/失败
	 */
	editRectangle: (classificationType: ClassificationType, isFilled: boolean, center?: Vector3, heading?: number, w?: number, h?: number) => Promise<boolean>;
	/**
	 * 开始Spline
	 * @param classificationType 贴地模式
	 * @param splineType SLineType
	 * @param countPerSegment 每一段点个数
	 * @param positions 节点数组（支持传入undefine或空数）
	 * @returns 开始成功/失败
	 */
	editSpline: (classificationType: ClassificationType, splineType: SLineType, countPerSegment?: number, positions?: Vector3[] | number[]) => Promise<boolean>;
	/**
	 * 通过屏幕点拾取编辑对象顶点索引
	 * @param screenPosition
	 * @returns vertexIndex:拾取到的顶点索引（-1表示拾取失败）
	 */
	editPickVertex: (screenPosition: Vector2) => number;
	/**
	 *   vertex0  segment0  vertex1  segment1  vertex2     ...    vertexN
	 *      |        |         |        |          |                   |
	 *      *——————————————————*———————————————————*———————————————————*
	 *      |                                                          |
	 *      |_________________segmentN(polygon only)___________________|
	 *
	 * 通过屏幕点拾取编辑对象线段索引
	 * @param screenPosition
	 * @returns segmentIndex线段索引值（-1表示拾取失败）,  position:点击位置）
	 */
	editPickSegment: (screenPosition: Vector2) => {
		segmetIndex: number;
		position: Vector3;
	};
	/**
	 * 设置编辑点（并高亮之）
	 * @param vertexIndex 编辑点索引（-1表示取消编辑点，该点高亮消失。PS：有效值【-1,0...length-1】）
	 * @returns 设置是否成功（失败原因：越界，线长为0）
	 */
	setEditVertexIndex: (vertexIndex: number) => Promise<boolean>;
	/**
	 * 获取编辑点
	 * @returns 编辑点索引（-1表示未设置）
	 */
	getEditVertexIndex: () => Promise<number>;
	/**
	 * 获取编辑点坐标
	 * @returns 编辑点
	 */
	getEditVertexPosition: () => Vector3 | undefined;
	/**
	 * 删除顶点
	 * @param vertexIndex 删除的顶点的索引（ if(vertexIndex===undefined){vertexIndex = editIndex},vertexIndex==-1时删除最后一个点,vertexIndex越界删除失败）
	 * @return 删除成功/失败
	 */
	editRemoveVertex: (vertexIndex?: number) => boolean;
	/**
	 * 添加顶点
	 * @param vertexPosition 添加顶点坐标（球面地理坐标或屏幕点坐标）
	 * @param vertexIndex 添加顶点所到线段的索引（vertexIndex===undefined ? 加到editIndex+1处 : 加到vertexIndex处 vertexIndex===-1，加到最后）
	 * @return 删除成功/失败
	 */
	editAddVertex: (vertexPosition: Vector3 | Vector2, vertexIndex?: number) => boolean;
	/**
	 * 移动顶点
	 * @param vertexPosition 顶点位置（球面地理坐标或屏幕点坐标）
	 * @param vertexIndex 移动节点的索引 if(vertexIndex===undefined){vertexIndex = editIndex},vertexIndex==-1时移动最后一个点
	 * @returns
	 */
	editMoveVertex: (vertexPosition: Vector3 | Vector2, vertexIndex?: number) => boolean;
	/**
	 * 预添加
	 * @param vertexPosition 预添加顶点坐标（球面地理坐标或屏幕点坐标）
	 * @param vertexIndex 预添加顶点所到线段的索引（vertexIndex===undefined ? 加到editIndex+1处 : 加到vertexIndex处 vertexIndex===-1，加到最后）
	 * @returns
	 */
	testEditAddVertex: (vertexPosition: Vector3 | Vector2, vertexIndex?: number) => Promise<boolean>;
	/**
	 * 预移动
	 * @param vertexPosition 顶点位置（球面地理坐标或屏幕点坐标）
	 * @param vertexIndex 预移动节点的索引
	 * @returns
	 */
	testEditMoveVertex: (vertexPosition: Vector3 | Vector2, vertexIndex?: number) => Promise<boolean>;
	/**
	 * 结束预览
	 * @returns
	 */
	endEditTest: () => Promise<void>;
	/**
	 * 获取当前编辑结果
	 * @returns 编辑结果数组（地理球面坐标数组）
	 */
	currentEditVertex: () => Vector3[] | Circle | Rectangle | Spline;
	/**
	 * 结束编辑
	 * @returns 编辑结果数组（地理球面坐标数组）
	 */
	editEnd: () => Vector3[] | Circle | Rectangle | Spline;
	translateEntity: (entityId: string, from: Vector2, to: Vector2) => Promise<boolean>;
};
/** 发送消息实现接口 */
export type MessagerSendHandler = (event: string) => void;
export interface MessagerHandlers {
	sendHandler: MessagerSendHandler;
	handleLargeMessage?: (str: string, limit: number) => {
		isLarge: boolean;
		message: string;
	};
	decodeLargeMessage?: (base64: string) => string;
}
export interface ServerOption {
	/**
	 * 是否开启右上角导航
	 */
	navigation: boolean;
}
export declare function createClient(handlers: MessagerHandlers): Client;
export type Client = typeof enums & {
	init: (container?: string, option?: Partial<ServerOption>) => Promise<void>;
	handleMessage: (messageStr: string) => void;
	destroy: () => Promise<void>;
	addListener: <key extends keyof SuperMap3DEvent>(event: key, listener: (param: SuperMap3DEvent[key]) => void) => void;
	removeListener: <key extends keyof SuperMap3DEvent>(event: key, listener?: ((param: SuperMap3DEvent[key]) => void) | undefined) => void;
} & ClientModule;
export interface ClientModule {
	scene: AsyncFunction<IScene> & {
		camera: AsyncFunction<ICamera>;
		trackingLayer: AsyncFunction<ITrackingLayer>;
		particleLayers: AsyncFunction<IParticleLayers>;
		scanEffect: AsyncFunction<IScanEffect>;
	};
	animation: AsyncFunction<IAnimation>;
	measure: AsyncFunction<IMeasure>;
	analysis: AsyncFunction<IAnalysis>;
	magnifier: AsyncFunction<IMagnifier>;
	geometrist: AsyncFunction<IGeometrist>;
	tileCache: AsyncFunction<ITileCache>;
	coordTrans: AsyncFunction<ICoordTrans>;
}

export {};
